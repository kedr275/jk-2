<?xml version='1.0' encoding='UTF-8'?>
<model name='tbd' version=''><package name='com.vmware.vapi.std'><doc><description index='0'><text>The {@name com.vmware.vapi.std} {@term package} provides standard</text><text>types that can be used in the interface specification of any {@term service}.</text></description></doc><structure name='AuthenticationScheme' namespace='com.vmware.vapi.std'><doc><description index='0'><text>The {@link AuthenticationScheme} class defines constants for authentication</text><text>scheme identifiers for authentication mechanisms present in the vAPI infrastructure</text><text>shipped by VMware.</text><text>&lt;p&gt;</text><text>A third party extension can define and implements it's own</text><text>authentication mechanism and define a constant in a different IDL file.</text></description></doc><constant name='NO_AUTHENTICATION'><type primitive='String'/><doc><description index='0'><text>Indicates that the request doesn't need any authentication.</text></description></doc><value>com.vmware.vapi.std.security.no_authentication</value></constant><constant name='SAML_BEARER_TOKEN'><type primitive='String'/><doc><description index='0'><text>Indicates that the security context in a request is using a SAML bearer</text><text>token based authentication scheme.</text><text>&lt;p&gt;</text><text>In this scheme, the following pieces of information</text><text>has to be passed in the SecurityContext structure in the</text><text>execution context of the request:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The scheme identifier: com.vmware.vapi.std.security.saml_bearer_token&lt;/li&gt;</text><text>&lt;li&gt;The token itself&lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Sample security context in JSON format that matches the specification:</text><text>{@code</text><text>{</text><text>'schemeId': 'com.vmware.vapi.std.security.saml_bearer_token',</text><text>'token': 'the token itself'</text><text>}</text><text>}</text><text>vAPI runtime provide convenient factory methods that take SAML bearer token</text><text>and to create the security context that conforms to the above mentioned format.</text></description></doc><value>com.vmware.vapi.std.security.saml_bearer_token</value></constant><constant name='SAML_HOK_TOKEN'><type primitive='String'/><doc><description index='0'><text>Indicates that the security context in a request is using a SAML</text><text>holder-of-key token based authentication scheme.</text><text>&lt;p&gt;</text><text>In this scheme, the following pieces of information</text><text>has to be passed in the SecurityContext structure in the</text><text>execution context of the request:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The scheme identifier: com.vmware.vapi.std.security.saml_hok_token&lt;/li&gt;</text><text>&lt;li&gt;Signature of the request: This includes - algorithm used for signing</text><text>the request, SAML holder of key token and signature digest &lt;/li&gt;</text><text>&lt;li&gt;Request timestamp: This includes the {@code created} and {@code expires}</text><text>timestamp of the request. The timestamp should match the following</text><text>format - YYYY-MM-DDThh:mm:ss.sssZ (e.g. 1878-03-03T19:20:30.451Z).</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Sample security context in JSON format that matches the specification:</text><text>{@code</text><text>{</text><text>'schemeId': 'com.vmware.vapi.std.security.saml_hok_token',</text><text>'signature': {</text><text>'alg': 'RS256',</text><text>'samlToken': ...,</text><text>'value': ...,</text><text>},</text><text>'timestamp': {</text><text>'created': '2012-10-26T12:24:18.941Z',</text><text>'expires': '2012-10-26T12:44:18.941Z',</text><text>}</text><text>}</text><text>}</text><text>vAPI runtime provide convenient factory methods that take SAML holder of key token</text><text>and private key to create the security context that conforms to the above</text><text>mentioned format.</text></description></doc><value>com.vmware.vapi.std.security.saml_hok_token</value></constant><constant name='SESSION_ID'><type primitive='String'/><doc><description index='0'><text>Indicates that the security context in a request is using a session</text><text>identifier based authentication scheme.</text><text>&lt;p&gt;</text><text>In this scheme, the following pieces of information</text><text>has to be passed in the SecurityContext structure in the</text><text>execution context of the request:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The scheme identifier - com.vmware.vapi.std.security.session_id&lt;/li&gt;</text><text>&lt;li&gt;Valid session identifier - This is usually returned by a login</text><text>method of a session manager interface for a particular vAPI service</text><text>of this authentication scheme&lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>Sample security context in JSON format that matches the specification:</text><text>{@code</text><text>{</text><text>'schemeId': 'com.vmware.vapi.std.security.session_id',</text><text>'sessionId': ....,</text><text>}</text><text>}</text><text>vAPI runtime provides convenient factory methods that take session identifier</text><text>as input parameter and create a security context that conforms to the above</text><text>format.</text></description></doc><value>com.vmware.vapi.std.security.session_id</value></constant><constant name='USER_PASSWORD'><type primitive='String'/><doc><description index='0'><text>Indicates that the security context in a request is using username/password</text><text>based authentication scheme.</text><text>&lt;p&gt;</text><text>In this scheme, the following pieces of information</text><text>has to be passed in the SecurityContext structure in the</text><text>execution context of the request:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The scheme identifier - com.vmware.vapi.std.security.user_password&lt;/li&gt;</text><text>&lt;li&gt;Username&lt;/li&gt;</text><text>&lt;li&gt;Password&lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Sample security context in JSON format that matches the specification:</text><text>{@code</text><text>{</text><text>'schemeId': 'com.vmware.vapi.std.security.user_password',</text><text>'userName': ....,</text><text>'password': ...</text><text>}</text><text>}</text><text>&lt;br&gt;</text><text>vAPI runtime provides convenient factory methods that take username and password</text><text>as input parameters and create a security context that conforms to the above</text><text>format.</text></description></doc><value>com.vmware.vapi.std.security.user_password</value></constant></structure><structure name='DynamicID' namespace='com.vmware.vapi.std'><doc><description index='0'><text>The {@name DynamicID} {@term structure} represents an identifier for a</text><text>resource of an arbitrary type.</text></description></doc><attribute name='type'><type primitive='String'/><doc><description index='0'><text>The type of resource being identified (for example</text><text>{@code com.acme.Person}).</text><text>&lt;p&gt;</text><text>{@term Services} that contain {@term operations} for creating and</text><text>deleting resources typically contain a {@term constant} specifying the</text><text>resource type for the resources being created and deleted.</text><text>The API metamodel metadata {@term services} include a {@term service}</text><text>that allows retrieving all the known resource types.</text></description></doc></attribute><attribute name='id'><type primitive='ID'/><doc><description index='0'><text>The identifier for a resource whose type is specified by {@link #type}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} {@name #type} must contain the actual resource type.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} {@name #type} will contain the actual resource type.</text></content></doc><metadata><property name='Resource' type='java.util.Map'><entry key='typeHolder' type='java.lang.String'>type</entry></property></metadata></attribute></structure><structure name='LocalizableMessage' namespace='com.vmware.vapi.std'><doc><description index='0'><text>The {@name LocalizableMessage} {@term structure} represents a localizable</text><text>string or message template.  {@term Services} include one or more localizable</text><text>message templates in the {@term errors} they report so that clients can</text><text>display diagnostic messages in the native language of the user.</text><text>{@term Services} can include localizable strings in the data returned from</text><text>{@term operations} to allow clients to display localized status information</text><text>in the native language of the user.</text></description></doc><attribute name='id'><type primitive='String'/><doc><description index='0'><text>Unique identifier of the localizable string or message template.</text><text>&lt;p&gt;</text><text>This identifier is typically used to retrieve a locale-specific</text><text>string or message template from a message catalog.</text></description></doc></attribute><attribute name='defaultMessage'><type primitive='String'/><doc><description index='0'><text>The value of this localizable string or message template in the</text><text>{@code en_US} (English) locale.  If {@link #id} refers to a message</text><text>template, the default message will contain the substituted arguments.</text><text>This value can be used by clients that do not need to display strings and</text><text>messages in the native language of the user.  It could also be used as a</text><text>fallback if a client is unable to access the appropriate message catalog.</text></description></doc></attribute><attribute name='args'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>Arguments to be substituted into a message template.</text></description></doc></attribute></structure></package><package name='com.vmware.vapi.std.activation'><service name='ActivationManager' namespace='com.vmware.vapi.std.activation'><doc><description index='0'><text>&lt;b&gt;WARNING:&lt;/b&gt; Use only as a sample. The API is experimental and subject to</text><text>change in future versions.</text><text>&lt;p&gt;</text><text>Activation tracking/management service.</text><text>&lt;p&gt;</text><text>An activation describes a method invocation in the runtime.</text></description></doc><operation name='cancel'><doc><description index='0'><text>Asks for cancellation of a running activation. Whether or not the</text><text>cancellation request will have any effect depends on the implementation</text><text>of the method that has to be canceled.</text></description></doc><parameter name='activationId'><type primitive='String'/><doc><description index='0'><text>activation identifier</text></description></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>there is no activation with the specified id</text></description></doc></error><result></result></operation></service></package><package name='com.vmware.vapi.std.errors'><doc><description index='0'><text>The {@name com.vmware.vapi.std.errors} {@term package} provides the standard</text><text>{@term errors} that can be included in the list of {@term errors} in the</text><text>specification of {@term operations} to indicate that the {@term operation}</text><text>might report those {@term errors}.</text><text>It also provides some {@term structures} intended to be used as payload to</text><text>provide additional information about those {@term errors}.</text></description></doc><structure name='AlreadyExists' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name AlreadyExists} {@term error} indicates that an attempt was made to</text><text>create an entity but the entity already exists.  Typically the entity has a</text><text>name or identifier that is required to be unique in some context, but there</text><text>is already an entity with that name or identifier in that context.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to create a new tag category when a tag category with the</text><text>specified name already exists.&lt;/li&gt;</text><text>&lt;li&gt;Trying to create a new tag in tag category when a tag with the</text><text>specified name already exists the tag category.&lt;/li&gt;</text><text>&lt;li&gt;Trying to create a LUN with a specific UUID on a node (for replication</text><text>purposes) when a LUN with that UUID already exists on the node.&lt;/li&gt;</text><text>&lt;li&gt;Trying to create a file in a directory or move or copy a file to a</text><text>directory when a file with that name already exists in the directory.</text><text>&lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='AlreadyInDesiredState' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name AlreadyInDesiredState} {@term error} indicates that an attempt to</text><text>change the state of a resource or service had no effect because the resource</text><text>or service is already in the desired state.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to power on a virtual machine that is already powered on.&lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='ArgumentLocations' namespace='com.vmware.vapi.std.errors'><doc><description index='0'><text>The {@name ArgumentLocations} {@term structure} describes which part(s) of</text><text>the input to the {@term operation} caused the {@term error}.</text><text>&lt;p&gt;</text><text>Some types of {@term errors} are caused by the value of one of the inputs to</text><text>the {@term operation}, possibly due to an interaction with other inputs to</text><text>the {@term operation}.</text><text>This {@term structure} is intended to be used as the payload to identify</text><text>those inputs when the {@term operation} reports {@term errors} like</text><text>{@link InvalidArgument} or {@link NotFound}.</text><text>See {@link Error#data}.</text></description></doc><attribute name='primary'><type primitive='String'/><doc><description index='0'><text>String describing the location of the input that triggered the</text><text>{@term error}.</text></description></doc></attribute><attribute name='secondary'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>{@term List} (possibly empty) of strings describing the locations of</text><text>other inputs that caused the the primary input to trigger the</text><text>{@term error}.</text></description></doc></attribute></structure><structure name='Canceled' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name Canceled} {@term error} indicates that the {@term operation}</text><text>canceled itself in response to an explicit request to do so.</text><text>{@term Operations} being "canceled" for other reasons (for example the client</text><text>connection was closed, a time out occured, or due to excessive resource</text><text>consumption) should not report this {@term error}.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A user is monitoring the progress of the {@term operation} in a GUI and</text><text>sees that it is likely to take longer than he is willing to wait and</text><text>clicks the cancel button. &lt;/li&gt;</text><text>&lt;li&gt;A user invokes the {@term operation} using a command-line tool and</text><text>decides that she didn't really want to invoke that {@term operation},</text><text>and presses CTRL-c. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The client's connection to the server was closed. Reporting an</text><text>{@term error} is pointless since the client will not receive the error</text><text>response because the connection has been closed. &lt;/li&gt;</text><text>&lt;li&gt;The request is taking longer than some amount of time.  The {@link</text><text>TimedOut} {@term error} would be reported if the time was specified as</text><text>part of the input or is documented in the API contract. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='ConcurrentChange' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name ConcurrentChange} {@term error} indicates  that a data structure,</text><text>entity, or resource has been modified since some earlier point in time.</text><text>Typically this happens when the client is doing the &lt;i&gt;write&lt;/i&gt; portion of a</text><text>read-modify-write sequence and indicates that it wants the server to notify</text><text>it if the data in the server has changed after it did the &lt;i&gt;read&lt;/i&gt;, so</text><text>that it can avoid overwriting that change inadvertantly.</text></description></doc></structure><structure name='Error' namespace='com.vmware.vapi.std.errors'><doc><description index='0'><text>The {@name Error} {@term error} describes the{@term fields} common to all standard {@term errors}.</text><text>&lt;p&gt;</text><text>This {@term error} serves two purposes:</text><text>&lt;ol&gt;</text><text>&lt;li&gt;It is the {@term error} that clients in many programming</text><text>languages can catch to handle all standard {@term errors}.  Typically</text><text>those clients will display one or more of the localizable messages from</text><text>{@link #messages} to a human. &lt;/li&gt;</text><text>&lt;li&gt;It is the {@term error} that {@term operations} can report when</text><text>they need to report some {@term error}, but the {@term error} doesn't</text><text>fit into any other standard {@term error}, and in fact the only</text><text>reasonable way for a client to react to the {@term error} is to display</text><text>the message(s) to a human. &lt;/li&gt;</text><text>&lt;/ol&gt;</text></description></doc><metadata><property name='ErrorType' type='java.lang.String'>Exception</property></metadata><attribute name='messages'><type generic='List'><type reference='LocalizableMessage' namespace='com.vmware.vapi.std' target='STRUCTURE' declaration='com.vmware.vapi.std.LocalizableMessage'/></type><doc><description index='0'><text>Stack of one or more localizable messages for human {@term error}</text><text>consumers.</text><text>&lt;p&gt;</text><text>The message at the top of the stack (first in the list) describes</text><text>the {@term error} from the perspective of the {@term operation} the</text><text>client invoked.</text><text>Each subsequent message in the stack describes the "cause" of the prior</text><text>message.</text></description></doc></attribute><attribute name='data'><type generic='Optional'><type primitive='DynamicStructure'/></type><doc><description index='0'><text>Data to facilitate clients responding to the {@term operation} reporting</text><text>a standard {@term error} to indicating that it was unable to complete</text><text>successfully.</text><text>&lt;p&gt;</text><text>{@term Operations} may provide data that clients can use when responding</text><text>to {@term errors}.  Since the data that clients need may be specific to</text><text>the context of the {@term operation} reporting the {@term error},</text><text>different {@term operations} that report the same {@term error} may</text><text>provide different data in the {@term error}.  The documentation for each</text><text>each {@term operation} will describe what, if any, data it provides for</text><text>each {@term error} it reports.</text><text>The {@link ArgumentLocations}, {@link FileLocations}, and</text><text>{@link TransientIndication} {@term structures} are intended as possible</text><text>values for this {@term field}.  {@link com.vmware.vapi.std.DynamicID} may</text><text>also be useful as a value for this {@term field} (although that is not</text><text>its primary purpose).  Some {@term services} may provide their own</text><text>specific {@term structures} for use as the value of this {@term field}</text><text>when reporting {@term errors} from their {@term operations}.</text></description><content type='optionalReason'><text>Some {@term operations} will not set this {@term field}</text><text>when reporting {@term errors}.</text></content></doc></attribute></structure><structure name='FeatureInUse' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name FeatureInUse} {@term error} indicates that an action cannot be</text><text>completed because a feature is in use.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to disable snapshots on a virtual machine which has a</text><text>snapshot. &lt;/li&gt;</text><text>&lt;li&gt;Trying to downgrade a license that has licensed features that are in</text><text>use. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='FileLocations' namespace='com.vmware.vapi.std.errors'><doc><description index='0'><text>The {@name FileLocations} {@term structure} identifies the file(s) that</text><text>caused the {@term operation} to report the {@term error}.</text><text>&lt;p&gt;</text><text>Some types of {@term errors} are caused by a problem with one or more files.</text><text>This {@term structure} is intended to be used as the payload to identify</text><text>those files when the {@term operation} reports {@term errors} like</text><text>{@link NotFound}.</text><text>See {@link Error#data}.</text></description></doc><attribute name='primary'><type primitive='String'/><doc><description index='0'><text>String identifying the file that triggered the {@term error}.</text></description></doc></attribute><attribute name='secondary'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>{@term List} (possibly empty) of strings identifying other files that</text><text>caused the primary file to trigger the {@term error}.</text></description></doc></attribute></structure><structure name='InternalServerError' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name InternalServerError} {@term error} indicates that the server</text><text>encounters an unexpected condition that prevented it from fulfilling the</text><text>request.</text><text>&lt;p&gt;</text><text>This {@term error} is reported by the API infrastructure, so it could occur</text><text>in response to the invocation of any {@term operation}.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The {@term operation} returns a value whose type doesn't match the type</text><text>type the {@term operation} says it should return.&lt;/li&gt;</text><text>&lt;li&gt;The {@term operation} reports an {@term error} that is not included in</text><text>the list of {@term errors} the {@term operation} says that it can</text><text>report.&lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='InvalidArgument' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name InvalidArgument} {@term error} indicates that the values received</text><text>for one or more {@term parameters} are not acceptable.</text><text>&lt;p&gt;</text><text>This {@term error} is reported by the API infrastructure, so it could occur</text><text>in response to the invocation of any {@term operation}.  It may also be</text><text>reported as the {@term result} of {@term operation}-specific validation.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A {@term parameter} has a value that is not of the expected type. &lt;/li&gt;</text><text>&lt;li&gt;A {@term parameter} has a value that is not in the required range.</text><text>&lt;/li&gt;</text><text>&lt;li&gt;A {@term parameter} has a value that is not one of the specifically</text><text>allowed strings. &lt;/li&gt;</text><text>&lt;li&gt;One {@term field} of a {@term structure} is the tag for a tagged union,</text><text>and has a specific value but another {@term field} of the</text><text>{@term structure} that is required to be specified when the tag has</text><text>that value is not specified, or another {@term field} of the</text><text>{@term structure} that is required to be unspecified when the tag has</text><text>that value is specified. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to create a new tag in tag category when a tag with the</text><text>specified name already exists the tag category.</text><text>The {@link AlreadyExists} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;li&gt;Invoke the {@term operation} to retrieve information about a virtual</text><text>machine, passing an id that does not identify an existing virtual</text><text>machine. The {@link NotFound} {@term error} would be used instead.</text><text>&lt;/li&gt;</text><text>&lt;li&gt;Attempt to put a virtual machine into a folder that can only contain</text><text>hosts. The {@link InvalidElementType} {@term error} would be used</text><text>instead. &lt;/li&gt;</text><text>&lt;li&gt;Attempt to attach a SCSI virtual disk to an IDE port. The</text><text>{@link InvalidElementType} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='InvalidElementConfiguration' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name InvalidElementConfiguration} {@term error} indicates that an</text><text>attempt to modify the configuration of an element or a group containing the</text><text>element failed due to the configuraton of the element.</text><text>A typical case is when the {@term operation} is am attempt to change the</text><text>group membership of the element fails, in which case a configuration change</text><text>on the element may allow the group membership change to succeed.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Attempt to move a host with a fault tolerant virtual machine out of a</text><text>cluster (i.e. make the host a standalone host). &lt;/li&gt;</text><text>&lt;li&gt;Attempt to remove a host from a DRS cluster without putting the host</text><text>into maintenance mode. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='InvalidElementType' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name InvalidElementType} {@term error} indicates that the server was</text><text>unable to fulfil the request because an element of a specific type cannot be</text><text>a member of particular group.</text><text>&lt;p&gt;</text><text>This {@term error} could be reported, for example, if an attempt is made to</text><text>put an element into the wrong type of container.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Attempt to put a virtual machine into a folder that can only contain</text><text>hosts. &lt;/li&gt;</text><text>&lt;li&gt;Attempt to attach a SCSI virtual disk to an IDE port. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A {@term parameter} has a value that is not of the expected type. The</text><text>{@link InvalidArgument} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='InvalidRequest' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name InvalidRequest} {@term error} indicates that the request is</text><text>malformed in such a way that the server is unable to process it.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The XML in a SOAP request is not well-formed so the server cannot parse</text><text>the request. &lt;/li&gt;</text><text>&lt;li&gt;The XML in a SOAP request is well-formed but does not match the</text><text>structure required by the SOAP specification. &lt;/li&gt;</text><text>&lt;li&gt;A JSON-RPC request is not valid JSON. &lt;/li&gt;</text><text>&lt;li&gt;The JSON sent in a JSON-RPC request is not a valid JSON-RPC</text><text>Request object. &lt;/li&gt;</text><text>&lt;li&gt;The Request object from a JSON-RPC request does not match the structure</text><text>required by the API infrastructure. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The {@term parameter} has a value that is not with the required range.</text><text>The {@link InvalidArgument} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;li&gt;The name of the {@term operation} specified in the request doesn't not</text><text>match any known {@term operation}. The {@link NotFound} {@term error}</text><text>would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Some transport protocols (for example JSON-RPC) include their own mechanism</text><text>for reporting these kinds of errors, and the API infrastructure for a</text><text>programming language may expose the errors using a language specific</text><text>mechanism, so this {@term error} might not be used.</text></description></doc></structure><structure name='NotAllowedInCurrentState' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name NotAllowedInCurrentState} {@term error} indicates that the</text><text>requested {@term operation} is not allowed with a resource or service in its</text><text>current state.  This could be because the {@term operation} is performing a</text><text>configuration change that is not allowed in the current state or because</text><text>{@term operation} itself is not allowed in the current state.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to add a virtual device that cannot be hot plugged to a running</text><text>virtual machine. &lt;/li&gt;</text><text>&lt;li&gt;Trying to upgrade the virtual hardware version for a suspended virtual</text><text>machine. &lt;/li&gt;</text><text>&lt;li&gt;Trying to power off, reset, or suspend a virtual machine that is not</text><text>powered on. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text><text>powered on. The {@link ResourceBusy} {@term error} would be used</text><text>instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='NotFound' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name NotFound} {@term error} indicates that a specified element could not be found.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Invoke the {@term operation} to retrieve information about a virtual</text><text>machine, passing an id that does not identify an existing virtual</text><text>machine. &lt;/li&gt;</text><text>&lt;li&gt;Invoke the {@term operation} to modify the configuration of a virtual</text><text>nic, passing an id that does not identify an existing virtual nic in</text><text>the specified virtual machine. &lt;/li&gt;</text><text>&lt;li&gt;Invoke the {@term operation} to remove a vswitch, passing an id that</text><text>does not identify an existing vswitch. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='OperationNotFound' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name OperationNotFound} {@term error} indicates that the</text><text>{@term operation} specified in the request could not be found.</text><text>&lt;p&gt;</text><text>Every API request specifies a service identifier and an operation identifier</text><text>along with the {@term parameters}. If the API infrastructure is unable to</text><text>find the requested {@term service} or {@term operation} it reports this</text><text>{@term error}.</text><text>&lt;p&gt;</text><text>This {@term error} can be reported by the API infrastructure for any</text><text>{@term operation}, but it is specific to the API infrastructure, and should</text><text>never be reported by the implementation of any {@term operation}.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A client provides an invalid service or operation identifier when</text><text>invoking the {@term operation} using a dynamic interface (for example</text><text>REST).</text><text>&lt;/li&gt;</text><text>&lt;li&gt;A client invokes the {@term operation} from a {@term service}, but that</text><text>{@term service} has not been installed. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A client invokes a task scheduling {@term operation}, but provides an</text><text>invalid service identifier or operation identifier. The</text><text>{@link NotFound} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='ResourceBusy' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name ResourceBusy} {@term error} indicates that the {@term operation}</text><text>could not be completed because a resource it needs is busy.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text><text>powered on. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to remove a VMFS datastore when there is a virtual machine</text><text>registered on any host attached to the datastore. The</text><text>{@link ResourceInUse} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='ResourceInUse' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name ResourceInUse} {@term error} indicates that the {@term operation}</text><text>could not be completed because a resource is in use.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to remove a VMFS datastore when the is a virtual machine</text><text>registered on any host attached to the datastore. &lt;/li&gt;</text><text>&lt;li&gt;Trying to add a virtual switch if the physical network adapter being</text><text>bridged is already in use. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text><text>powered on. The {@link ResourceBusy} {@term error} would be used instead.</text><text>&lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='ResourceInaccessible' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name ResourceInaccessible} {@term error} indicates that the</text><text>{@term operation} could not be completed because an entity is not accessible.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Attempt to invoke some {@term operation} on a virtual machine when the</text><text>virtual machine's configuration file is not accessible (for example due</text><text>to a storage APD condition). &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Attempt to invoke some {@term operation} when the server is too busy.</text><text>The {@link ServiceUnavailable} {@term error} would be used instead.</text><text>&lt;/li&gt;</text><text>&lt;li&gt;Attempt to invoke some {@term operation} when the server is undergoing</text><text>maintenance. The {@link ServiceUnavailable} {@term error} would be used</text><text>instead. &lt;/li&gt;</text><text>&lt;li&gt;Some {@term operation} fails to contact VMware Tools running inside the</text><text>virtual machine. The {@link ServiceUnavailable} {@term error} would be</text><text>used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='ServiceUnavailable' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name ServiceUnavailable} {@term error} indicates that the</text><text>{@term service} is unavailable.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Attempt to invoke a {@term operation} when the server is too busy.</text><text>&lt;/li&gt;</text><text>&lt;li&gt;Attempt to invoke a {@term operation} when the server is undergoing</text><text>maintenance. &lt;/li&gt;</text><text>&lt;li&gt;An {@term operation} fails to contact VMware Tools running inside the</text><text>virtual machine. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A client provides an invalid service or operation identifier when</text><text>invoking the {@term operation} using a dynamic interface (for example</text><text>REST). The {@link OperationNotFound} {@term error} would be used</text><text>instead. &lt;/li&gt;</text><text>&lt;li&gt;A client invokes the {@term operation} from the {@term service}, but</text><text>that {@term service} has not been installed. The</text><text>{@link OperationNotFound} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='TimedOut' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name TimedOut} {@term error} indicates that the {@term operation} did</text><text>not complete within the allowed amount of time.  The allowed amount of time</text><text>might be:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;provided by the client as an input {@term parameter}. &lt;/li&gt;</text><text>&lt;li&gt;a fixed limit of the {@term service} implementation that is a</text><text>documented part of the contract of the {@term service}. &lt;/li&gt;</text><text>&lt;li&gt;a configurable limit used by the implementation of the {@term service}.</text><text>&lt;/li&gt;</text><text>&lt;li&gt;a dynamic limit computed by the implementation of the {@term service}.</text><text>&lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>The {@term operation} may or may not complete after the {@name TimedOut}</text><text>{@term error} was reported.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The {@term operation} was unable to complete within the timeout</text><text>duration specified by a {@term parameter} of the {@term operation}.</text><text>&lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A server implementation that puts requests into a queue before</text><text>dispatching them might delete a request from the queue if it doesn't</text><text>get dispatched within &lt;i&gt;n&lt;/i&gt; minutes.  The {@link ServiceUnavailable}</text><text>{@term error} would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='TransientIndication' namespace='com.vmware.vapi.std.errors'><doc><description index='0'><text>The {@name TransientIndication} {@term structure} indicates whether or not</text><text>the {@term error} is transient.</text><text>&lt;p&gt;</text><text>Some types of {@term errors} are transient in certain situtations and not</text><text>transient in other situtations.  This {@term error} payload can be used to</text><text>indicate to clients whether a particular {@term error} is transient.</text><text>See {@link Error#data}.</text></description></doc><attribute name='isTransient'><type primitive='boolean'/><doc><description index='0'><text>Indicates that the {@term error} this {@term structure} is attached to is</text><text>transient.</text></description></doc></attribute></structure><structure name='UnableToAllocateResource' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name UnableToAllocateResource} {@term error} indicates that the</text><text>{@term operation} failed because it was unable to allocate or acquire a</text><text>required resource.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to power on a virtual machine when there are not enough licenses</text><text>to do so. &lt;/li&gt;</text><text>&lt;li&gt;Trying to power on a virtual machine that would violate a resource</text><text>usage policy. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to power off a virtual machine that is in the process of being</text><text>powered on. A {@link ResourceBusy} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;li&gt;Trying to remove a VMFS datastore when the is a virtual machine</text><text>registered on any host attached to the datastore. The</text><text>{@link ResourceInUse} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;li&gt;Trying to add a virtual switch if the physical network adapter being</text><text>bridged is already in use. The {@link ResourceInUse} {@term error}</text><text>would be used instead. &lt;/li&gt;</text><text>&lt;li&gt;Attempt to invoke some {@term operation} on a virtual machine when the</text><text>virtual machine's configuration file is not accessible (for example due</text><text>to a storage APD condition). The {@link ResourceInaccessible}</text><text>{@term error} would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='Unauthenticated' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name Unauthenticated} {@term error} indicates that the</text><text>{@term operation} requires authentication and the user is not authenticated.</text><text>&lt;p&gt;</text><text>API requests may include a security context containing user credentials.</text><text>For example, the user credentials could be a SAML token, a user name and</text><text>password, or the session identifier for a previously established session.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The SAML token in the request's security context has expired. &lt;/li&gt;</text><text>&lt;li&gt;The user name and password in the request's security context are</text><text>invalid. &lt;/li&gt;</text><text>&lt;li&gt;The session identifier in the request's security context identifies a</text><text>session that has expired. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt; The user is authenticated but isn't authorized to perform the</text><text>requested {@term operation}. The {@link Unauthorized} {@term error}</text><text>would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>For security reasons, the {@link Error#data} {@term field} in this</text><text>{@term error} is {@term unset}, and the {@link Error#messages} {@term field}</text><text>in this {@term error} does not disclose which part of the security context is</text><text>correct or incorrect.  For example the messages would not disclose whether a</text><text>username or a password is valid or invalid, but only that a combination of</text><text>username and password is invalid.</text></description></doc></structure><structure name='Unauthorized' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name Unauthorized} {@term error} indicates that the user is not</text><text>authorized to perform the {@term operation}.</text><text>&lt;p&gt;</text><text>API requests may include a security context containing user credentials.</text><text>For example, the user credentials could be a SAML token, a user name and</text><text>password, or the session identifier for a previously established session.</text><text>Invoking the {@term operation} may require that the user identified by those</text><text>credentials has particular privileges on the {@term operation} or on one or</text><text>more  resource identifiers passed to the {@term operation}.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The {@term operation} requires that the user have one or more</text><text>privileges on the {@term operation}, but the user identified by the</text><text>credentials in the security context does not have the required</text><text>privileges. &lt;/li&gt;</text><text>&lt;li&gt;The {@term operation} requires that the user have one or more</text><text>privileges on a resource identifier passed to the {@term operation},</text><text>but the user identified by the credentials in the security context does</text><text>not have the required privileges. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>&lt;p&gt;</text><text>Counterexamples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The SAML token in the request's security context has expired.  A</text><text>{@link Unauthenticated} {@term error} would be used instead. &lt;/li&gt;</text><text>&lt;li&gt;The user name and password in the request's security context are</text><text>invalid.  The {@link Unauthenticated} {@term error} would be used</text><text>instead. &lt;/li&gt;</text><text>&lt;li&gt;The session identifier in the request's security context identifies a</text><text>session that has expired.  The {@link Unauthenticated} {@term error}</text><text>would be used instead. &lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>&lt;p&gt;</text><text>For security reasons, the {@link Error#data} {@term field} in this</text><text>{@term error} is {@term unset}, and the {@link Error#messages} {@term field}</text><text>in this {@term error} does not disclose why the user is not authorized to</text><text>perform the {@term operation}.  For example the messages would not disclose</text><text>which privilege the user did not have or which resource identifier the user</text><text>did not have the required privilege to access.  The API documentation should</text><text>indicate what privileges are required.</text></description></doc></structure><structure name='UnexpectedInput' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name UnexpectedInput} {@term error} indicates that the request</text><text>contained a {@term parameter} or {@term field} whose name is not known by</text><text>the server.</text><text>&lt;p&gt;</text><text>Every {@term operation} expects {@term parameters} with known names.  Some of</text><text>those {@term parameters} may be (or contain) {@term structures}, and the</text><text>{@term operation} expects those {@term structures} to contain {@term fields}</text><text>with known names. If the {@term operation} receives</text><text>{@term parameters} or {@term fields} with names that is does not expect, this</text><text>{@term error} may be reported.</text><text>&lt;p&gt;</text><text>This {@term error} can be reported by the API infrastructure for any</text><text>{@term operation}, but it is specific to the API infrastructure, and should</text><text>never be reported by the implementation of any {@term operation}.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A client using stubs generated from the interface specification for</text><text>version2 of a {@term service} invokes the {@term operation} passing one</text><text>or more {@term parameters} that were added in version2, but they are</text><text>communicating with a server that only supports version1 of the</text><text>{@term service}. &lt;/li&gt;</text><text>&lt;li&gt;A client provides an unexpected {@term parameter} or {@term field} name</text><text>when invoking the {@term operation} using a dynamic interface (for</text><text>example REST). &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure><structure name='Unsupported' namespace='com.vmware.vapi.std.errors'><extendsType><type reference='Error' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.Error'/></extendsType><doc><description index='0'><text>The {@name Unsupported} {@term error} indicates that the {@term operation} is</text><text>not supported by the {@term service}.</text><text>&lt;p&gt;</text><text>Examples:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Trying to hot-plug a CPU when the current configuration of the VM does</text><text>not support hot-plugging of CPUs. &lt;/li&gt;</text><text>&lt;li&gt;Trying to change the memory size to a value that is not within the</text><text>acceptable guest memory bounds supported by the virtual machine's</text><text>host. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></structure></package><package name='com.vmware.vapi.std.interposition'><structure name='InvocationRequest' namespace='com.vmware.vapi.std.interposition'><doc><description index='0'><text>Information about an interposed request for operation invocation. All</text><text>interposers would receive an instance of this structure as an input</text><text>parameter.</text></description></doc><attribute name='serviceId'><type primitive='String'/><doc><description index='0'><text>Fully qualified name of the service which contains the interposed</text><text>operation. In canonical format. For example org.example.hello.</text></description></doc></attribute><attribute name='operationId'><type primitive='String'/><doc><description index='0'><text>Name of the interposed operation. In canonical format. For example</text><text>say_hello.</text></description></doc></attribute><attribute name='operationInput'><type primitive='Opaque'/><doc><description index='0'><text>Input of the interposed operation.</text></description></doc></attribute><attribute name='user'><type generic='Optional'><type reference='SecurityPrincipal' namespace='com.vmware.vapi.std.interposition' target='STRUCTURE' declaration='com.vmware.vapi.std.interposition.SecurityPrincipal'/></type><doc><description index='0'><text>User which started the interposed operation.</text></description><content type='optionalReason'><text>There could be no authentication information. For example when methods are invoked anonymously.</text></content></doc><metadata><property name='OptionalReason' type='java.lang.String'>There could be no authentication information. For example when methods are invoked anonymously.</property></metadata></attribute><attribute name='groups'><type generic='List'><type reference='SecurityPrincipal' namespace='com.vmware.vapi.std.interposition' target='STRUCTURE' declaration='com.vmware.vapi.std.interposition.SecurityPrincipal'/></type><doc><description index='0'><text>Groups of the user who started the interposed operation. Would be empty</text><text>if there is no authentication information.</text></description></doc></attribute></structure><structure name='InvocationResult' namespace='com.vmware.vapi.std.interposition'><doc><description index='0'><text>Information about the result from an interposed operation invocation. All</text><text>POST interposers will receive an instance of this structure.</text></description></doc><enumeration name='ResultType' namespace='com.vmware.vapi.std.interposition.InvocationResult'><doc><description index='0'><text>Type of the invocation result.</text></description></doc><constant name='NORMAL_RESULT'><type reference='ResultType' namespace='com.vmware.vapi.std.interposition.InvocationResult' target='ENUMERATION' declaration='com.vmware.vapi.std.interposition.InvocationResult.ResultType'/><doc><description index='0'><text>Normal invocation result.</text></description></doc><value></value></constant><constant name='ERROR_RESULT'><type reference='ResultType' namespace='com.vmware.vapi.std.interposition.InvocationResult' target='ENUMERATION' declaration='com.vmware.vapi.std.interposition.InvocationResult.ResultType'/><doc><description index='0'><text>Error invocation result.</text></description></doc><value></value></constant></enumeration><attribute name='resultType'><type reference='ResultType' namespace='com.vmware.vapi.std.interposition.InvocationResult' target='ENUMERATION' declaration='com.vmware.vapi.std.interposition.InvocationResult.ResultType'/><doc><description index='0'><text>Type of the invocation result.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='output'><type primitive='Opaque'/><doc><description index='0'><text>Normal result value.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>resultType</entry><entry key='value' type='java.lang.String'>NORMAL_RESULT</entry></property></metadata></attribute><attribute name='error'><type primitive='DynamicStructure'/><doc><description index='0'><text>Error result value.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>resultType</entry><entry key='value' type='java.lang.String'>ERROR_RESULT</entry></property></metadata></attribute></structure><structure name='SecurityPrincipal' namespace='com.vmware.vapi.std.interposition'><doc><description index='0'><text>VMODL equivalent of com.vmware.vapi.security.PrincipalId.</text></description></doc><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Principal name.</text></description></doc></attribute><attribute name='domain'><type generic='Optional'><type primitive='String'/></type><doc><description index='0'><text>Principal domain.</text></description><content type='optionalReason'><text>Domain is optional in com.vmware.vapi.security.PrincipalId</text></content></doc><metadata><property name='OptionalReason' type='java.lang.String'>Domain is optional in com.vmware.vapi.security.PrincipalId</property></metadata></attribute></structure></package><package name='com.vmware.vapi.std.introspection'><doc><description index='0'><text>The {@link com.vmware.vapi.std.introspection} package provides services that</text><text>expose basic information about the vAPI services registered with a vAPI provider.</text></description></doc><service name='Operation' namespace='com.vmware.vapi.std.introspection'><doc><description index='0'><text>The {@link Operation} service provides operations to retrieve</text><text>information about the operations present in a vAPI service.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata><structure name='DataDefinition' namespace='com.vmware.vapi.std.introspection.Operation'><doc><description index='0'><text>The {@link DataDefinition} structure describes a vAPI data type.</text></description></doc><enumeration name='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition'><doc><description index='0'><text>The {@link DataType} enumeration provides values representing the data types</text><text>supported by the vAPI infrastructure.</text></description></doc><constant name='BINARY'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a binary type.</text></description></doc><value></value></constant><constant name='BOOLEAN'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a boolean type. The possible values are</text><text>True and False equivalent of the language used to invoke</text><text>this operation.</text></description></doc><value></value></constant><constant name='DOUBLE'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a double type. It is a 64 bit floating point</text><text>number.</text></description></doc><value></value></constant><constant name='DYNAMIC_STRUCTURE'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a dynamic structure. This means, any data of type</text><text>{@link DataType#STRUCTURE} can be used.</text></description></doc><value></value></constant><constant name='ERROR'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a specific error type.</text></description></doc><value></value></constant><constant name='ANY_ERROR'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is arbitrary error type. This means, any data of type</text><text>{@link DataType#ERROR} can be used.</text></description></doc><value></value></constant><constant name='LIST'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a list data type. Any value of this type can have zero</text><text>or more elements in the list.</text></description></doc><value></value></constant><constant name='LONG'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a long data type. It is a 64 bit signed integer number.</text></description></doc><value></value></constant><constant name='OPAQUE'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is an opaque type. This means, data of any {@link DataType}</text><text>can be used.</text></description></doc><value></value></constant><constant name='OPTIONAL'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is an optional data type. Any value of this type can be null.</text></description></doc><value></value></constant><constant name='SECRET'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a secret data type. This is used for sensitive information. The</text><text>server will not log any data of this type and if possible wipe the data from</text><text>the memory after usage.</text></description></doc><value></value></constant><constant name='STRING'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a string data type. This is a unicode string.</text></description></doc><value></value></constant><constant name='STRUCTURE'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a structure data type. A structure has string identifier and a set of fields</text><text>with corresponding values.</text></description></doc><value></value></constant><constant name='STRUCTURE_REF'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a structure reference. This is used to break circular dependencies in the</text><text>type references. This just has a string identifier of the structure. Clients have to maintain</text><text>a list of structures already visited and use that to resolve this reference.</text></description></doc><value></value></constant><constant name='VOID'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Indicates the value is a void data type.</text></description></doc><value></value></constant></enumeration><attribute name='type'><type reference='DataType' namespace='com.vmware.vapi.std.introspection.Operation.DataDefinition' target='ENUMERATION' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition.DataType'/><doc><description index='0'><text>Data type of the value.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='elementDefinition'><type reference='DataDefinition' namespace='com.vmware.vapi.std.introspection.Operation' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition'/><doc><description index='0'><text>Contains the element definition for generic data types like List and Optional.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.util.List'><item type='java.lang.String'>OPTIONAL</item><item type='java.lang.String'>LIST</item></entry></property></metadata></attribute><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Fully qualified name of the structure.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.util.List'><item type='java.lang.String'>STRUCTURE</item><item type='java.lang.String'>STRUCTURE_REF</item><item type='java.lang.String'>ERROR</item></entry></property></metadata></attribute><attribute name='fields'><type generic='Map'><type primitive='String'/><type reference='DataDefinition' namespace='com.vmware.vapi.std.introspection.Operation' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition'/></type><doc><description index='0'><text>Fields of the structure type. The key of the map is the canonical name of the field</text><text>and the value is the {@link DataDefinition} for the field. The order of the structure fields</text><text>defined in IDL is not maintained by the {@link Operation} service.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.util.List'><item type='java.lang.String'>STRUCTURE</item><item type='java.lang.String'>ERROR</item></entry></property></metadata></attribute></structure><structure name='Info' namespace='com.vmware.vapi.std.introspection.Operation'><doc><description index='0'><text>Information about a vAPI operation.</text></description></doc><attribute name='inputDefinition'><type reference='DataDefinition' namespace='com.vmware.vapi.std.introspection.Operation' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition'/><doc><description index='0'><text>{@link DataDefinition} describing the operation input.</text><text>&lt;p&gt;</text><text>The {@link DataDefinition#type} of this field will be</text><text>{@link DataDefinition.DataType#STRUCTURE}. The keys of</text><text>{@link DataDefinition#fields} are the names of the operation</text><text>parameters, and the values of {@link DataDefinition#fields}</text><text>describe the type of the operation parameters.</text></description></doc></attribute><attribute name='outputDefinition'><type reference='DataDefinition' namespace='com.vmware.vapi.std.introspection.Operation' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition'/><doc><description index='0'><text>{@link DataDefinition} describing the operation output.</text></description></doc></attribute><attribute name='errorDefinitions'><type generic='List'><type reference='DataDefinition' namespace='com.vmware.vapi.std.introspection.Operation' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Operation.DataDefinition'/></type><doc><description index='0'><text>List of {@link DataDefinition} describing the errors that the operation</text><text>might report.</text><text>&lt;p&gt;</text><text>The {@link DataDefinition#type} of every element in this list will be</text><text>{@link DataDefinition.DataType#ERROR}.</text></description></doc></attribute></structure><operation name='list'><doc><description index='0'><text>Returns the set of operation identifiers for a given vAPI service.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>service identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the service identifier does not exist.</text></description></doc></error><result><type generic='Set'><type primitive='ID'/></type><doc><description index='0'><text>set of operation identifiers for a given vAPI service.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Returns the {@link Info} for a given vAPI operation.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>service identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><parameter name='operationId'><type primitive='ID'/><doc><description index='0'><text>operation identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the operation identifier does not exist.</text></description><description index='1'><text>If the service identifier does not exist.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.std.introspection.Operation' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Operation.Info'/><doc><description index='0'><text>{@link Info} for a given vAPI operation.</text></description></doc></result></operation></service><service name='Provider' namespace='com.vmware.vapi.std.introspection'><doc><description index='0'><text>The {@link Provider} service provides operations to retrieve information about a</text><text>vAPI Provider. A provider is a container that exposes one or more vAPI services.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.provider</property></metadata><structure name='Info' namespace='com.vmware.vapi.std.introspection.Provider'><doc><description index='0'><text>Information about a vAPI provider</text></description></doc><attribute name='id'><type primitive='ID'/><doc><description index='0'><text>Identifier of the provider</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be an identifier for the resource type: {@code com.vmware.vapi.provider}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be an identifier for the resource type: {@code com.vmware.vapi.provider}.</text></content></doc></attribute><attribute name='checksum'><type primitive='String'/><doc><description index='0'><text>Checksum of the information present in the provider.</text><text>&lt;p&gt;</text><text>Clients can use this information to check if the service information has changed.</text><text>When a new service is added or removed (or) one of the existing service information</text><text>is modified, the value of the checksum changes.</text><text>&lt;p&gt;</text><text>The information used to calculate the checksum includes:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;service identifiers&lt;/li&gt;</text><text>&lt;li&gt;operation identifiers inside the service&lt;/li&gt;</text><text>&lt;li&gt;input, output and error definitions of an operation&lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></attribute></structure><operation name='get'><doc><description index='0'><text>Returns a {@link Info} describing the vAPI provider on which</text><text>the operation is invoked</text></description></doc><result><type reference='Info' namespace='com.vmware.vapi.std.introspection.Provider' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Provider.Info'/><doc><description index='0'><text>{@link Info} describing the vAPI provider on which the</text><text>operation is invoked</text></description></doc></result></operation></service><service name='Service' namespace='com.vmware.vapi.std.introspection'><doc><description index='0'><text>The {@link Service} service provides operations to retrieve information about the</text><text>services exposed by a vAPI provider. A provider is a container that exposes one or</text><text>more vAPI services.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata><structure name='Info' namespace='com.vmware.vapi.std.introspection.Service'><doc><description index='0'><text>Information about a vAPI service</text></description></doc><attribute name='operations'><type generic='Set'><type primitive='ID'/></type><doc><description index='0'><text>Set of identifiers of operations present in the service</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata></attribute></structure><operation name='list'><doc><description index='0'><text>Returns the set of service identifiers.</text></description></doc><result><type generic='Set'><type primitive='ID'/></type><doc><description index='0'><text>set of service identifiers</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Returns the {@link Info} for the specified service</text></description></doc><parameter name='id'><type primitive='ID'/><doc><description index='0'><text>service identifier</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the service identifier does not exist</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.std.introspection.Service' target='STRUCTURE' declaration='com.vmware.vapi.std.introspection.Service.Info'/><doc><description index='0'><text>{@link Info} for the specified service</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata'><doc><description index='0'><text>The {@link com.vmware.vapi.metadata} {@term package} provides metadata {@term services}. These</text><text>are {@term services} that provide different facets of API information. Clients can</text><text>use these {@term services} to:</text><text>&lt;ul&gt;</text><text>&lt;li&gt; Discover APIs available in the infrastructure. &lt;/li&gt;</text><text>&lt;li&gt; Fetch metadata that can be used to build presentation layers like CLI, REST, etc.&lt;/li&gt;</text><text>&lt;li&gt; Fetch authentication and authorization metadata. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc><enumeration name='SourceType' namespace='com.vmware.vapi.metadata'><doc><description index='0'><text>The {@name SourceType} {@term enumerated type} defines the types of sources</text><text>for API metadata. You specify the type of source when adding a metadata</text><text>source to a metadata service.</text></description></doc><constant name='FILE'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Indicates the metadata source is a JSON file.</text></description></doc><value></value></constant><constant name='REMOTE'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Indicates the metadata source is a remote server.</text></description></doc><value></value></constant></enumeration><structure name='SourceCreateSpec' namespace='com.vmware.vapi.metadata'><doc><description index='0'><text>The {@name SourceCreateSpec} {@term structure} contains</text><text>the registration information for a metadata source.</text></description></doc><metadata><property name='Includable' type='java.lang.Boolean'>true</property></metadata><attribute name='description'><type primitive='String'/><doc><description index='0'><text>English language human readable description of the source.</text></description></doc></attribute><attribute name='type'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Type of the metadata source.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='filepath'><type primitive='String'/><doc><description index='0'><text>Absolute file path of the metamodel metadata file that has</text><text>the metamodel information about one component element.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>FILE</entry></property></metadata></attribute><attribute name='address'><type primitive='URI'/><doc><description index='0'><text>Connection information of the remote server. This should be</text><text>of the format http(s)://IP:port/namespace.</text><text>&lt;p&gt;</text><text>The remote server should contain the {@term services} in</text><text>{@link com.vmware.vapi.metadata.metamodel} {@term package}.</text><text>It could expose metamodel information of one or more</text><text>components.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute></structure><structure name='SourceInfo' namespace='com.vmware.vapi.metadata'><doc><description index='0'><text>Metadata source info</text></description></doc><attribute name='type'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Type of the metadata source</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='fileName'><type primitive='String'/><doc><description index='0'><text>Name of the metadata source file</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>FILE</entry></property></metadata></attribute><attribute name='remoteAddr'><type primitive='String'/><doc><description index='0'><text>Address of the remote metadata source</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute><attribute name='msgProtocol'><type primitive='String'/><doc><description index='0'><text>Message protocol to be used</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute></structure></package><package name='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.authentication} {@term package} provides</text><text>{@term services} that expose authentication information for operation</text><text>elements across all the service elements.</text><text>&lt;p&gt;</text><text>To calculate the effective authentication information for an operation element,</text><text>you should first see if there is an authentication scheme specified for the</text><text>operation element. If it is not specified, then authentication scheme for the</text><text>service element that contains this operation element is used. If it is not specified</text><text>for the service element as well, then the authentication scheme for the package</text><text>element that contains this service element is used.</text></description></doc><structure name='AuthenticationInfo' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name AuthenticationInfo} {@term structure} describes the authentication</text><text>information. Authentication information could be specified for a package element,</text><text>service elenent or an operation element.</text><text>&lt;p&gt;</text><text>Using the authentication scheme information, a client invoking an API call from</text><text>any {@term service} can figure out what kind of credentials are needed for that</text><text>API call.</text></description></doc><enumeration name='SchemeType' namespace='com.vmware.vapi.metadata.authentication.AuthenticationInfo'><doc><description index='0'><text>The {@name SchemeType} {@term enumerated type} provides {@term enumeration values}</text><text>for the set of valid authentication scheme types.</text></description></doc><constant name='SESSIONLESS'><type reference='SchemeType' namespace='com.vmware.vapi.metadata.authentication.AuthenticationInfo' target='ENUMERATION' declaration='com.vmware.vapi.metadata.authentication.AuthenticationInfo.SchemeType'/><doc><description index='0'><text>Indicates that the scheme is a session less authentication scheme,</text><text>the user is authenticated on every {@term operation}. There is no explicit session</text><text>establishment.</text></description></doc><value></value></constant><constant name='SESSION_AWARE'><type reference='SchemeType' namespace='com.vmware.vapi.metadata.authentication.AuthenticationInfo' target='ENUMERATION' declaration='com.vmware.vapi.metadata.authentication.AuthenticationInfo.SchemeType'/><doc><description index='0'><text>Indicates that the scheme is a session aware authentication scheme. It</text><text>requires an explicit login before executing a {@term operation} and logout when a</text><text>session terminates. A {@term service} might choose to have a session aware scheme</text><text>if it wants to associate some state corresponding to the user until the</text><text>user logs out or if it wants to mitigate the cost of authenticating the</text><text>user on every {@term operation}.</text></description></doc><value></value></constant></enumeration><attribute name='schemeType'><type reference='SchemeType' namespace='com.vmware.vapi.metadata.authentication.AuthenticationInfo' target='ENUMERATION' declaration='com.vmware.vapi.metadata.authentication.AuthenticationInfo.SchemeType'/><doc><description index='0'><text>The type of the authentication scheme.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='sessionManager'><type primitive='String'/><doc><description index='0'><text>In a session aware authentication scheme, a session manager is required that supports</text><text>{@code create}, {@code delete} and {@code keepAlive} {@term operations}. The fully</text><text>qualified {@term service} name of the session manager is provided in</text><text>{@link AuthenticationInfo#sessionManager} {@term field}. This {@term service} is</text><text>responsible for handling sessions.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>schemeType</entry><entry key='value' type='java.lang.String'>SESSION_AWARE</entry></property></metadata></attribute><attribute name='scheme'><type primitive='String'/><doc><description index='0'><text>String identifier of the authentication scheme.</text><text>&lt;p&gt;</text><text>Following are the supported authentication schemes by the infrastructure:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;The identifier {@code com.vmware.vapi.std.security.saml_hok_token} for</text><text>SAML holder of key token based authentication mechanism. &lt;/li&gt;</text><text>&lt;li&gt;The identifier {@code com.vmware.vapi.std.security.bearer_token} for</text><text>SAML bearer token based authentication mechanism. &lt;/li&gt;</text><text>&lt;li&gt;The identifier {@code com.vmware.vapi.std.security.session_id} for</text><text>session based authentication mechanism. &lt;/li&gt;</text><text>&lt;li&gt;The identifier {@code com.vmware.vapi.std.security.user_pass} for</text><text>username and password based authentication mechanism. &lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc></attribute></structure><structure name='ComponentData' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name ComponentData} {@term structure} contains the authentication information</text><text>of the component along with its fingerprint.</text></description></doc><attribute name='info'><type reference='ComponentInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.ComponentInfo'/><doc><description index='0'><text>Authentication information of the component. This includes information about all the</text><text>{@term packages} in the component.</text></description></doc></attribute><attribute name='fingerprint'><type primitive='String'/><doc><description index='0'><text>Fingerprint of the metadata of the component.</text><text>&lt;p&gt;</text><text>Authentication information could change when there is an infrastructure update.</text><text>Since the data present in {@link ComponentData#info} could be quite large,</text><text>{@name #fingerprint} provides a convenient way to check if the data for a particular</text><text>component is updated.</text><text>&lt;p&gt;</text><text>You should store the fingerprint associated with a component. After an update,</text><text>by invoking the {@link com.vmware.vapi.metadata.authentication.Component#fingerprint}</text><text>{@term operation}, you can retrieve the new fingerprint for the component. If the new</text><text>fingerprint and the previously stored fingerprint do not match, clients can then use</text><text>the {@link com.vmware.vapi.metadata.authentication.Component#get} to retrieve the new</text><text>authentication information for the component.</text></description></doc></attribute></structure><structure name='ComponentInfo' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name ComponentInfo} {@term structure} contains authentication</text><text>information of a component element.</text><text>&lt;p&gt;</text><text>For an explanation of authentication information contained within</text><text>component elements, see {@link com.vmware.vapi.metadata.authentication.Component}.</text></description></doc><attribute name='packages'><type generic='Map'><type primitive='ID'/><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.PackageInfo'/></type><doc><description index='0'><text>Authentication information of all the package elements. The key in the</text><text>{@term map} is the identifier of the package element and the value in the {@term map}</text><text>is the authentication information for the package element.</text><text>&lt;p&gt;</text><text>For an explanation of authentication information containment within</text><text>package elements, see {@link com.vmware.vapi.metadata.authentication.Package}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata></attribute></structure><structure name='OperationInfo' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name OperationInfo} {@term structure} contains authentication information</text><text>of an operation element.</text></description></doc><attribute name='schemes'><type generic='List'><type reference='AuthenticationInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.AuthenticationInfo'/></type><doc><description index='0'><text>List of authentication schemes used by an operation element. The</text><text>authentication scheme specified on the service element corresponding to this</text><text>operation element is ignored.</text></description></doc></attribute></structure><structure name='PackageInfo' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name PackageInfo} {@term structure} contains authentication information</text><text>of a package element.</text><text>&lt;p&gt;</text><text>For an explanation of authentication information contained within package</text><text>elements, see {@link com.vmware.vapi.metadata.authentication.Package}.</text></description></doc><attribute name='schemes'><type generic='List'><type reference='AuthenticationInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.AuthenticationInfo'/></type><doc><description index='0'><text>List of authentication schemes to be used for all the operation elements</text><text>contained in this package element. If a particular service or operation</text><text>element has no explicit authentications defined in the authentication</text><text>defintion file, these authentication schemes are used for authenticating</text><text>the user.</text></description></doc></attribute><attribute name='services'><type generic='Map'><type primitive='ID'/><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.ServiceInfo'/></type><doc><description index='0'><text>Information about all service elements contained in this package element</text><text>that contain authentication information. The key in the {@term map} is the identifier</text><text>of the service element and the value in the {@term map} is the authentication</text><text>information for the service element.</text><text>&lt;p&gt;</text><text>For an explanation of authentication information containment within service</text><text>elements, see {@link com.vmware.vapi.metadata.authentication.Service}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></attribute></structure><structure name='ServiceInfo' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name ServiceInfo} {@term structure} contains authentication information</text><text>of a service element.</text><text>&lt;p&gt;</text><text>For an explanation of authentication information contained within service</text><text>elements, see {@link com.vmware.vapi.metadata.authentication.Service}.</text></description></doc><attribute name='schemes'><type generic='List'><type reference='AuthenticationInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.AuthenticationInfo'/></type><doc><description index='0'><text>List of authentication schemes to be used for all the operation elements</text><text>contained in this service element. The authentication scheme specified</text><text>on the package element corresponding to this service element is ignored.</text></description></doc></attribute><attribute name='operations'><type generic='Map'><type primitive='ID'/><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.OperationInfo'/></type><doc><description index='0'><text>Information about all operation elements contained in this service element</text><text>that contain authentication information. The key in the {@term map} is the identifier</text><text>of the operation element and the value in the {@term map} is the authentication</text><text>information for the operation element.</text><text>&lt;p&gt;</text><text>For an explanation of containment of authentication information within operation</text><text>elements, see {@link com.vmware.vapi.metadata.authentication.service.Operation}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata></attribute></structure><service name='Component' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name Component} {@term service} provides {@term operations}</text><text>to retrieve authentication information of a component element.</text><text>&lt;p&gt;</text><text>A component element is said to contain authentication information if</text><text>any one of package elements contained in it has authentication</text><text>information.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.component</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for component.</text></description></doc><value>com.vmware.vapi.component</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the component elements that have</text><text>authentication information.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the component elements that</text><text>have authentication information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves authentication information about the component element</text><text>corresponding to {@param.name componentId}.</text><text>&lt;p&gt;</text><text>The {@link ComponentData} contains the authentication information about</text><text>the component element and it's fingerprint. It contains information about all</text><text>the package elements that belong to this component element.</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the component element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the component element associated with {@param.name componentId}</text><text>does not have any authentication information.</text></description></doc></error><result><type reference='ComponentData' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.ComponentData'/><doc><description index='0'><text>The {@link ComponentData} instance that corresponds to</text><text>{@param.name componentId}</text></description></doc></result></operation><operation name='fingerprint'><doc><description index='0'><text>Retrieves the fingerprint computed from the authentication metadata of</text><text>the component element corresponding to {@param.name componentId}.</text><text>&lt;p&gt;</text><text>The fingerprint provides clients an efficient way to check if the metadata</text><text>for a particular component has been modified on the server. The client can do</text><text>this by comparing the result of this operation with the fingerprint returned</text><text>in the result of {@link com.vmware.vapi.metadata.authentication.Component#get}.</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the component element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the component element associated with {@param.name componentId}</text><text>does not have any authentication information.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>The fingerprint computed from the authentication metadata of the component.</text></description></doc></result></operation></service><service name='Package' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name Package} {@term service} provides {@term operations}</text><text>to retrieve authentication information of a package element.</text><text>&lt;p&gt;</text><text>A package element is said to contain authentication information if there</text><text>is a default authentication assigned to all service elements contained</text><text>in the package element or if one of the service element contained in this package</text><text>element has authentication information.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for package.</text></description></doc><value>com.vmware.vapi.package</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the package elements that have</text><text>authentication information.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the package elements that</text><text>have authentication information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves authentication information about the package element</text><text>corresponding to {@param.name packageId}.</text></description></doc><parameter name='packageId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the package element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the package element associated with {@param.name packageId}</text><text>does not have any authentication information.</text></description></doc></error><result><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.PackageInfo'/><doc><description index='0'><text>The {@link PackageInfo} instance that corresponds to</text><text>{@param.name packageId}</text></description></doc></result></operation></service><service name='Service' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name Service} {@term service} provides {@term operations}</text><text>to retrieve authentication information of a service element.</text><text>&lt;p&gt;</text><text>A service element is said to contain authentication information if there</text><text>is a default authentication assigned to all operation elements contained in</text><text>a service element or if one of the operation elements contained in this service</text><text>element has authentication information.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for service.</text></description></doc><value>com.vmware.vapi.service</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the service elements that have</text><text>authentication information.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the service elements that</text><text>have authentication information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves authentication information about the service element</text><text>corresponding to {@param.name serviceId}.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId}</text><text>does not have any authentication information.</text></description></doc></error><result><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.ServiceInfo'/><doc><description index='0'><text>The {@link ServiceInfo} instance that corresponds to</text><text>{@param.name serviceId}</text></description></doc></result></operation></service><service name='Source' namespace='com.vmware.vapi.metadata.authentication'><doc><description index='0'><text>The {@name Source} {@term service} provides {@term operations} to</text><text>manage the sources of authentication metadata information.</text><text>&lt;p&gt;</text><text>The interface definition language infrastructure provides tools to</text><text>generate various kinds of metadata in JSON format from the interface</text><text>definition files and additional properties files. One of the generated</text><text>files contains authentication information. The generated file can be</text><text>registered as a source of metadata.</text><text>&lt;p&gt;</text><text>The authentication file contains all the data present in the interface</text><text>definition files. Each authentication file contains data about one</text><text>component element. When a authentication file is added as a source,</text><text>each source contributes only one component element's metadata.</text><text>&lt;p&gt;</text><text>Authentication metadata can also be discovered from a remote server that</text><text>supports the authentication metadata {@term services} (see</text><text>{@link com.vmware.vapi.metadata.authentication}). Since multiple components</text><text>can be registered with a single metadata server, when a remote server</text><text>is registered as a source, that source can contribute more than one</text><text>component.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.metadata.authentication.source</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for metadata source.</text></description></doc><value>com.vmware.vapi.metadata.authentication.source</value></constant><structure name='Info' namespace='com.vmware.vapi.metadata.authentication.Source'><doc><description index='0'><text>The {@name Info} {@term structure} contains the metadata source</text><text>information.</text></description></doc><attribute name='description'><type primitive='String'/><doc><description index='0'><text>English language human readable description of the source.</text></description></doc></attribute><attribute name='type'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Type of the metadata source.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='filepath'><type primitive='String'/><doc><description index='0'><text>Absolute file path of the authentication metadata file that has</text><text>the authentication information about one component element. The {@name filePath}</text><text>is the path to the file in the server's filesystem.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>FILE</entry></property></metadata></attribute><attribute name='address'><type primitive='URI'/><doc><description index='0'><text>Connection information for the remote server. This must be</text><text>in the format http(s)://IP:port/namespace.</text><text>&lt;p&gt;</text><text>The remote server must support the {@term services} in the</text><text>{@link com.vmware.vapi.metadata.authentication} {@term package}.</text><text>It must expose authentication information of one or more</text><text>components.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute></structure><structure name='CreateSpec' namespace='com.vmware.vapi.metadata.authentication.Source'><doc><description index='0'><text>The {@name CreateSpec} {@term structure} contains the registration</text><text>information of a authentication source.</text></description></doc><metadata><property name='Include' type='com.vmware.vapi.idl.model.IdlReferenceType'><type reference='SourceCreateSpec' namespace='com.vmware.vapi.metadata' target='STRUCTURE' declaration='com.vmware.vapi.metadata.SourceCreateSpec'/></property></metadata></structure><operation name='create'><doc><description index='0'><text>Creates a new metadata source. Once the server validates the registration</text><text>information of the metadata source, the authentication metadata is retrieved</text><text>from the source. This populates elements in all the {@term services}</text><text>defined in {@link com.vmware.vapi.metadata.authentication} {@term package}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>metadata source identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.authentication.source}.</text></content></doc></parameter><parameter name='spec'><type reference='CreateSpec' namespace='com.vmware.vapi.metadata.authentication.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.Source.CreateSpec'/><doc><description index='0'><text>create specification.</text></description></doc></parameter><error name='AlreadyExists'><type reference='AlreadyExists' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.AlreadyExists'/><doc><description index='0'><text>if the metadata source identifier is already</text><text>registered with the infrastructure.</text></description></doc></error><error name='InvalidArgument'><type reference='InvalidArgument' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.InvalidArgument'/><doc><description index='0'><text>if the type of the source specified in {@link CreateSpec#type}</text><text>is invalid.</text></description><description index='1'><text>if the file specified in {@link CreateSpec#filepath}</text><text>is not a valid JSON file or if the format of the authentication</text><text>metadata in the JSON file is invalid.</text></description><description index='2'><text>if the URI specified in {@link CreateSpec#address} is unreachable</text><text>or if there is a transport protocol or message protocol mismatch</text><text>between the client and the server or if the remote server do not</text><text>have {@term services} present in {@link com.vmware.vapi.metadata.authentication}</text><text>{@term package}.</text></description></doc></error><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the file specified in {@link CreateSpec#filepath}</text><text>does not exist.</text></description></doc></error><result></result></operation><operation name='delete'><doc><description index='0'><text>Deletes an existing authentication metadata source from the infrastructure.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.authentication.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source identifier is not found.</text></description></doc></error><result></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the metadata source corresponding to</text><text>{@param.name sourceId}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.authentication.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.metadata.authentication.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.Source.Info'/><doc><description index='0'><text>The {@link Info} instance that corresponds to</text><text>{@param.name sourceId}</text></description></doc></result></operation><operation name='list'><doc><description index='0'><text>Returns the identifiers of the metadata sources currently registered</text><text>with the infrastructure.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for metadata sources currently</text><text>registered.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.metadata.authentication.source}.</text></content></doc></result></operation><operation name='reload'><doc><description index='0'><text>Reloads the authentication metadata from all the metadata sources or of a</text><text>particular metadata source if {@param.name sourceId} is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, all the metadata sources</text><text>are reloaded.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.authentication.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result></result></operation><operation name='fingerprint'><doc><description index='0'><text>Returns the aggregate fingerprint of metadata from all the metadata</text><text>sources or from a particular metadata source if {@param.name sourceId}</text><text>is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, the fingerprint of all the</text><text>metadata sources is returned.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.authentication.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>Aggregate fingerprint of all the metadata sources or of a</text><text>particular metadata source.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.authentication.service'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.authentication.service} {@term package} provides</text><text>{@term services} to retrieve authentication information for operation</text><text>elements.</text></description></doc><service name='Operation' namespace='com.vmware.vapi.metadata.authentication.service'><doc><description index='0'><text>The {@name Operation} {@term service} provides {@term operations}</text><text>to retrieve authentication information of an operation element.</text><text>&lt;p&gt;</text><text>An operation element is said to contain authentication information if</text><text>authentication schemes are specified in the authentication definition</text><text>file.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for operation.</text></description></doc><value>com.vmware.vapi.operation</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the operation elements contained in the service</text><text>element corresponding to {@param.name serviceId} that have authentication</text><text>information.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId}</text><text>does not have any operation elements that have authentication</text><text>information.</text></description></doc></error><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>List of identifiers for the operation elements contained in the</text><text>service element that have authentication information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves the authentication information about an operation element</text><text>corresponding to {@param.name operationId} contained in the service element</text><text>corresponding to {@param.name serviceId}.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><parameter name='operationId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the operation element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId} does not</text><text>exist.</text></description><description index='1'><text>if the operation element associated with {@param.name operationId} does not</text><text>exist.</text></description><description index='2'><text>if the operation element associated with {@param.name operationId} does not have</text><text>any authentication information.</text></description></doc></error><result><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.authentication' target='STRUCTURE' declaration='com.vmware.vapi.metadata.authentication.OperationInfo'/><doc><description index='0'><text>The {@link com.vmware.vapi.metadata.authentication.OperationInfo} instance</text><text>that corresponds to {@param.name operationId}.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.cli'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.cli} {@term package} provides</text><text>{@term services} that expose all the information required to display</text><text>namespace or command help, execute a command and display it's result.</text></description></doc><service name='Command' namespace='com.vmware.vapi.metadata.cli'><doc><description index='0'><text>The {@name Command} {@term service} provides {@term operations}</text><text>to get information about command line interface (CLI) commands.</text></description></doc><enumeration name='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command'><doc><description index='0'><text>The {@name FormatterType} {@term enumerated type} defines supported</text><text>CLI output formatter types. See {@link Info#formatter}.</text></description></doc><constant name='SIMPLE'><type reference='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.FormatterType'/><doc><description index='0'><text>Displays command output as it is.</text></description></doc><value></value></constant><constant name='TABLE'><type reference='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.FormatterType'/><doc><description index='0'><text>Displays command output in table format.</text></description></doc><value></value></constant><constant name='JSON'><type reference='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.FormatterType'/><doc><description index='0'><text>Displays command output in JSON format.</text></description></doc><value></value></constant><constant name='XML'><type reference='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.FormatterType'/><doc><description index='0'><text>Displays command output in XML format.</text></description></doc><value></value></constant><constant name='CSV'><type reference='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.FormatterType'/><doc><description index='0'><text>Displays command output in CSV format.</text></description></doc><value></value></constant><constant name='HTML'><type reference='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.FormatterType'/><doc><description index='0'><text>Displays command output in HTML format.</text></description></doc><value></value></constant></enumeration><enumeration name='GenericType' namespace='com.vmware.vapi.metadata.cli.Command'><doc><description index='0'><text>The {@name GenericType} {@term enumerated type} defines generic types supported</text><text>by {@name Command} {@term service}. See {@link OptionInfo#generic}.</text></description></doc><constant name='NONE'><type reference='GenericType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.GenericType'/><doc><description index='0'><text>Default case.</text></description></doc><value></value></constant><constant name='OPTIONAL'><type reference='GenericType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.GenericType'/><doc><description index='0'><text>Input parameter is an optional.</text></description></doc><value></value></constant><constant name='LIST'><type reference='GenericType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.GenericType'/><doc><description index='0'><text>Input parameter is a list.</text></description></doc><value></value></constant></enumeration><structure name='OutputFieldInfo' namespace='com.vmware.vapi.metadata.cli.Command'><doc><description index='0'><text>The {@name OutputFieldInfo} {@term structure} describes the name used by</text><text>the CLI to display a single {@term field} of a {@term structure} element in the</text><text>interface definition language.</text></description></doc><attribute name='fieldName'><type primitive='String'/><doc><description index='0'><text>Name of the {@term field}.</text></description></doc></attribute><attribute name='displayName'><type primitive='String'/><doc><description index='0'><text>Name used by the CLI to display the {@term field}.</text></description></doc></attribute></structure><structure name='OutputInfo' namespace='com.vmware.vapi.metadata.cli.Command'><doc><description index='0'><text>The {@name OutputInfo} {@term structure} describes the names used by the</text><text>CLI to display the {@term fields} of a {@term structure} element in the interface</text><text>definition language as well as the order in which the {@term fields} will</text><text>be displayed.</text></description></doc><attribute name='structureId'><type primitive='ID'/><doc><description index='0'><text>Name of the {@term structure}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata></attribute><attribute name='outputFields'><type generic='List'><type reference='OutputFieldInfo' namespace='com.vmware.vapi.metadata.cli.Command' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Command.OutputFieldInfo'/></type><doc><description index='0'><text>The order in which the {@term fields} of the {@term structure} will be</text><text>displayed by the CLI as well as the names used to display the {@term fields}.</text></description></doc></attribute></structure><structure name='OptionInfo' namespace='com.vmware.vapi.metadata.cli.Command'><doc><description index='0'><text>The {@name OptionInfo} {@term structure} describes information about a</text><text>specific input option of a command.</text></description></doc><attribute name='longOption'><type primitive='String'/><doc><description index='0'><text>The long option name of the parameter as used by the user.</text></description></doc></attribute><attribute name='shortOption'><type generic='Optional'><type primitive='String'/></type><doc><description index='0'><text>The single character value option name.</text></description><content type='optionalReason'><text>If not present, there's no single character option for the parameter.</text></content></doc></attribute><attribute name='fieldName'><type primitive='String'/><doc><description index='0'><text>The fully qualified name of the option referred to by the operation element in {@link Info#operationId}.</text></description></doc></attribute><attribute name='description'><type primitive='String'/><doc><description index='0'><text>The description of the option to be displayed to the user when</text><text>they request usage information for a CLI command.</text></description></doc></attribute><attribute name='type'><type primitive='String'/><doc><description index='0'><text>The type of option. This is used to display information about what kind of data</text><text>is expected (string, number, boolean, etc.) for the option when they request</text><text>usage information for a CLI command.</text><text>For {@term enumerated type} this stores the fully qualified {@term enumerated type} id.</text></description></doc></attribute><attribute name='generic'><type reference='GenericType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.GenericType'/><doc><description index='0'><text>This is used to tell the user whether the option is required or optional,</text><text>or whether they can specify the option multiple times.</text></description></doc></attribute></structure><structure name='Identity' namespace='com.vmware.vapi.metadata.cli.Command'><doc><description index='0'><text>The {@name Identity} {@term structure} uniquely identifies a</text><text>command in the CLI commands tree.</text></description></doc><attribute name='path'><type primitive='String'/><doc><description index='0'><text>The dot-separated path of the namespace containing the command in the CLI command tree.</text></description></doc></attribute><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Name of the command.</text></description></doc></attribute></structure><structure name='Info' namespace='com.vmware.vapi.metadata.cli.Command'><doc><description index='0'><text>The {@name Info} {@term structure} contains information about a command. It</text><text>includes the identity of the command, a description, information about the</text><text>{@term service} and {@term operation} that implement the command, and CLI-specific</text><text>information for the command.</text></description></doc><attribute name='identity'><type reference='Identity' namespace='com.vmware.vapi.metadata.cli.Command' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Command.Identity'/><doc><description index='0'><text>Basic command identity.</text></description></doc></attribute><attribute name='description'><type primitive='String'/><doc><description index='0'><text>The text description displayed to the user in help output.</text></description></doc></attribute><attribute name='serviceId'><type primitive='ID'/><doc><description index='0'><text>The service identifier that contains the operations for this CLI command.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></attribute><attribute name='operationId'><type primitive='ID'/><doc><description index='0'><text>The operation identifier corresponding to this CLI command.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata></attribute><attribute name='options'><type generic='List'><type reference='OptionInfo' namespace='com.vmware.vapi.metadata.cli.Command' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Command.OptionInfo'/></type><doc><description index='0'><text>The input for this command.</text></description></doc></attribute><attribute name='formatter'><type generic='Optional'><type reference='FormatterType' namespace='com.vmware.vapi.metadata.cli.Command' target='ENUMERATION' declaration='com.vmware.vapi.metadata.cli.Command.FormatterType'/></type><doc><description index='0'><text>The formatter to use when displaying the output of this command.</text></description><content type='optionalReason'><text>If not present, client can choose a default output formatter.</text></content></doc></attribute><attribute name='outputFieldList'><type generic='List'><type reference='OutputInfo' namespace='com.vmware.vapi.metadata.cli.Command' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Command.OutputInfo'/></type><doc><description index='0'><text>List of output structure name and output field info.</text></description></doc></attribute></structure><operation name='list'><doc><description index='0'><text>Returns the identifiers of all commands, or commands in a specific namespace.</text></description></doc><parameter name='path'><type generic='Optional'><type primitive='String'/></type><doc><description index='0'><text>The dot-separated path of the namespace for which command identifiers should be returned.</text></description><content type='optionalReason'><text>If {@term unset} identifiers of all commands registered with the infrastructure will be returned.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if a namespace corresponding to {@param.name path} doesn't exist.</text></description></doc></error><result><type generic='List'><type reference='Identity' namespace='com.vmware.vapi.metadata.cli.Command' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Command.Identity'/></type><doc><description index='0'><text>Identifiers of the requested commands.</text></description></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about a command including information about how to execute</text><text>that command.</text></description></doc><parameter name='identity'><type reference='Identity' namespace='com.vmware.vapi.metadata.cli.Command' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Command.Identity'/><doc><description index='0'><text>Identifier of the command for which to retreive information.</text></description></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if a command corresponding to {@param.name identity} doesn't exist.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.metadata.cli.Command' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Command.Info'/><doc><description index='0'><text>Information about the command including information about how to execute that command.</text></description></doc></result></operation><operation name='fingerprint'><doc><description index='0'><text>Returns the aggregate fingerprint of all the command metadata from all</text><text>the metadata sources.</text><text>&lt;p&gt;</text><text>The fingerprint provides clients an efficient way to check if the metadata</text><text>for commands has been modified on the server.</text></description></doc><result><type primitive='String'/><doc><description index='0'><text>Fingerprint of all the command metadata present on the server.</text></description></doc></result></operation></service><service name='Namespace' namespace='com.vmware.vapi.metadata.cli'><doc><description index='0'><text>The {@name Namespace} {@term service} provides {@term operations}</text><text>to get information about command line interface (CLI) namespaces.</text></description></doc><structure name='Identity' namespace='com.vmware.vapi.metadata.cli.Namespace'><doc><description index='0'><text>The {@name Identity} {@term structure} uniquely identifies a</text><text>namespace in the CLI namespace tree.</text></description></doc><attribute name='path'><type primitive='String'/><doc><description index='0'><text>The dot-separated path of the namespace containing the namespace in</text><text>the CLI node tree. For top-level namespace this will be empty.</text></description></doc></attribute><attribute name='name'><type primitive='String'/><doc><description index='0'><text>The name displayed to the user for this namespace.</text></description></doc></attribute></structure><structure name='Info' namespace='com.vmware.vapi.metadata.cli.Namespace'><doc><description index='0'><text>The {@name Info} {@term structure} contains information about a namespace.</text><text>It includes the identity of the namespace, a description, information</text><text>children namespaces.</text></description></doc><attribute name='identity'><type reference='Identity' namespace='com.vmware.vapi.metadata.cli.Namespace' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Namespace.Identity'/><doc><description index='0'><text>Basic namespace identity.</text></description></doc></attribute><attribute name='description'><type primitive='String'/><doc><description index='0'><text>The text description displayed to the user in help output.</text></description></doc></attribute><attribute name='children'><type generic='List'><type reference='Identity' namespace='com.vmware.vapi.metadata.cli.Namespace' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Namespace.Identity'/></type><doc><description index='0'><text>The children of this namespace in the tree of CLI namespaces.</text></description></doc></attribute></structure><operation name='list'><doc><description index='0'><text>Returns the identifiers of all namespaces registered with the infrastructure.</text></description></doc><result><type generic='List'><type reference='Identity' namespace='com.vmware.vapi.metadata.cli.Namespace' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Namespace.Identity'/></type><doc><description index='0'><text>Identifiers of all the namespaces.</text></description></doc></result></operation><operation name='get'><doc><description index='0'><text>Retreives information about a namespace including information about children of</text><text>that namespace.</text></description></doc><parameter name='identity'><type reference='Identity' namespace='com.vmware.vapi.metadata.cli.Namespace' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Namespace.Identity'/><doc><description index='0'><text>Identifier of the namespace for which to retreive information.</text></description></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if a namespace corresponding to {@param.name identity} doesn't exist.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.metadata.cli.Namespace' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Namespace.Info'/><doc><description index='0'><text>Information about the namespace including information about child of that namespace.</text></description></doc></result></operation><operation name='fingerprint'><doc><description index='0'><text>Returns the aggregate fingerprint of all the namespace metadata from all</text><text>the metadata sources.</text><text>&lt;p&gt;</text><text>The fingerprint provides clients an efficient way to check if the metadata</text><text>for namespaces has been modified on the server.</text></description></doc><result><type primitive='String'/><doc><description index='0'><text>Fingerprint of all the namespace metadata present on the server.</text></description></doc></result></operation></service><service name='Source' namespace='com.vmware.vapi.metadata.cli'><doc><description index='0'><text>The {@name Source} {@term service} provides {@term operations} to</text><text>manage the sources of command line interface (CLI) metadata information.</text><text>&lt;p&gt;</text><text>The interface definition language infrastructure provides tools to</text><text>generate various kinds of metadata in JSON format from the interface</text><text>definition files and additional properties files. One of the generated</text><text>files contains CLI information.</text><text>&lt;p&gt;</text><text>A CLI metadata file contains information about one component element.</text><text>When a CLI metadata file is added as a source, each source</text><text>contributes only one component element's metadata.</text><text>&lt;p&gt;</text><text>CLI metadata can also be discovered from a remote server that</text><text>supports the CLI metadata services (see {@link com.vmware.vapi.metadata.cli})</text><text>{@term package}. Since multiple components can be registered with</text><text>a single metadata server, when a remote server is registered as a</text><text>source, that source can contribute more than one component.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.metadata.source</property></metadata><structure name='Info' namespace='com.vmware.vapi.metadata.cli.Source'><doc><description index='0'><text>The {@name Info} {@term structure} contains the metadata source</text><text>information.</text></description></doc><attribute name='description'><type primitive='String'/><doc><description index='0'><text>English language human readable description of the source.</text></description></doc></attribute><attribute name='type'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>The type ({@enum.values SourceType}) of the metadata source.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='filepath'><type primitive='String'/><doc><description index='0'><text>Absolute file path of the CLI metadata file that has the CLI</text><text>information about one component. The {@name filepath}</text><text>is the path to the file in the server's filesystem.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>FILE</entry></property></metadata></attribute><attribute name='address'><type primitive='URI'/><doc><description index='0'><text>Connection information for the remote server. This should be</text><text>in the format http(s)://IP:port/namespace.</text><text>&lt;p&gt;</text><text>The remote server must contain the {@term services} in the</text><text>{@link com.vmware.vapi.metadata.cli} {@term package}.</text><text>It must expose CLI information of one or more</text><text>components.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute></structure><structure name='CreateSpec' namespace='com.vmware.vapi.metadata.cli.Source'><doc><description index='0'><text>The {@name CreateSpec} {@term structure} contains the registration</text><text>information of a CLI source.</text></description></doc><metadata><property name='Include' type='com.vmware.vapi.idl.model.IdlReferenceType'><type reference='SourceCreateSpec' namespace='com.vmware.vapi.metadata' target='STRUCTURE' declaration='com.vmware.vapi.metadata.SourceCreateSpec'/></property></metadata></structure><operation name='create'><doc><description index='0'><text>Creates a new metadata source. Once the server validates the registration</text><text>information of the metadata source, the CLI metadata is retrieved</text><text>from the source. This populates elements in all the {@term services}</text><text>defined in {@link com.vmware.vapi.metadata.cli} {@term package}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>metadata source identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><parameter name='spec'><type reference='CreateSpec' namespace='com.vmware.vapi.metadata.cli.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Source.CreateSpec'/><doc><description index='0'><text>create specification.</text></description></doc></parameter><error name='AlreadyExists'><type reference='AlreadyExists' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.AlreadyExists'/><doc><description index='0'><text>If the metadata source identifier is already</text><text>registered with the infrastructure.</text></description></doc></error><error name='InvalidArgument'><type reference='InvalidArgument' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.InvalidArgument'/><doc><description index='0'><text>If type of the source specified in {@link CreateSpec#type}</text><text>is invalid.</text></description><description index='1'><text>If the file specified in {@link CreateSpec#filepath}</text><text>is not a valid JSON file or if the format of the CLI</text><text>metadata in the JSON file is invalid.</text></description><description index='2'><text>If the URI specified in {@link CreateSpec#address} is unreachable</text><text>or if there is a transport protocol or message protocol mismatch</text><text>between the client and the server or if the remote server do not</text><text>have {@term services} present in {@link com.vmware.vapi.metadata.cli}</text><text>{@term package}.</text></description></doc></error><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the file specified in {@link CreateSpec#filepath}</text><text>does not exist.</text></description></doc></error><result></result></operation><operation name='delete'><doc><description index='0'><text>Deletes an existing CLI metadata source from the infrastructure.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the metadata source identifier is not found.</text></description></doc></error><result></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the metadata source corresponding to</text><text>{@param.name sourceId}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the metadata source identifier is not found.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.metadata.cli.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.cli.Source.Info'/><doc><description index='0'><text>The {@link Info} instance that corresponds to</text><text>{@param.name sourceId}</text></description></doc></result></operation><operation name='list'><doc><description index='0'><text>Returns the identifiers of the metadata sources currently registered</text><text>with the infrastructure.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for metadata sources currently</text><text>registered.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></result></operation><operation name='reload'><doc><description index='0'><text>Reloads the CLI metadata from all the metadata sources or of a</text><text>particular metadata source if {@param.name sourceId} is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, all the metadata sources</text><text>are reloaded.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the metadata source identifier is not found.</text></description></doc></error><result></result></operation><operation name='fingerprint'><doc><description index='0'><text>Returns the aggregate fingerprint of metadata from all the metadata</text><text>sources or from a particular metadata source if {@param.name sourceId}</text><text>is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, the fingerprint of all the</text><text>metadata sources is returned.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the metadata source identifier is not found.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>Aggregate fingerprint of all the metadata sources or of a</text><text>particular metadata source.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.metamodel} {@term package} provides</text><text>{@term services} that expose all the information present in the interface</text><text>definition language (IDL) specification.</text><text>&lt;p&gt;</text><text>Metamodel metadata is organized into an hierarchy of elements. The main elements</text><text>are:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Enumeration: An enumeration element that has a list of enumeration value</text><text>elements.&lt;/li&gt;</text><text>&lt;li&gt;Constant: A constant element has a name and a value.&lt;/li&gt;</text><text>&lt;li&gt;Structure: A structure element can have field elements, constant elements and</text><text>enumeration elements. &lt;/li&gt;</text><text>&lt;li&gt;Operation: An operation has a list of parameter elements, result element</text><text>and error elements.&lt;/li&gt;</text><text>&lt;li&gt;Service: A service is a collection of operation elements, structure elements,</text><text>enumerated elements and constant elements.&lt;/li&gt;</text><text>&lt;li&gt;Package: A package is a collection of service elements, structure elements and</text><text>enumeration elements.&lt;/li&gt;</text><text>&lt;li&gt;Component: A component is a collection of package elements.&lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>The {@name com.vmware.vapi.metadata.metamodel} {@term package} has {@term services} that</text><text>enables two styles of client applications:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;A client can retrieve the exact pieces of information it requires</text><text>using the various granularities the API supports (that is</text><text>{@link com.vmware.vapi.metadata.metamodel.Component},</text><text>{@link com.vmware.vapi.metadata.metamodel.Package},</text><text>{@link com.vmware.vapi.metadata.metamodel.Service},</text><text>{@link com.vmware.vapi.metadata.metamodel.Structure},</text><text>{@link com.vmware.vapi.metadata.metamodel.Enumeration} and</text><text>{@link com.vmware.vapi.metadata.metamodel.service.Operation}). In this case, it doesn't</text><text>cache any information locally and always invokes {@term operations} to get the</text><text>metamodel information it requires.&lt;/li&gt;</text><text>&lt;li&gt;A client can retrieve all the metamodel information in fewer {@term operation} invocations</text><text>using the {@link com.vmware.vapi.metadata.metamodel.Component} {@term service} and cache</text><text>the output locally. It can then poll on the fingerprint information exposed by</text><text>the {@link com.vmware.vapi.metadata.metamodel.Component} {@term service} to monitor</text><text>changes in API definition.&lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc><structure name='ComponentData' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ComponentData} {@term structure} contains the metamodel metadata</text><text>information of a component element along with its fingerprint.</text></description></doc><attribute name='info'><type reference='ComponentInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ComponentInfo'/><doc><description index='0'><text>Metamodel information of the component element. This includes information</text><text>about all the package elements contained in this component element.</text><text>&lt;p&gt;</text><text>The metamodel information about a component could be quite large if there</text><text>are a lot of package elements contained in this component.</text></description></doc></attribute><attribute name='fingerprint'><type primitive='String'/><doc><description index='0'><text>Fingerprint of the metamodel metadata of the component component.</text><text>&lt;p&gt;</text><text>Metamodel information could change when there is an infrastructure update and</text><text>new functionality is added to an existing component.</text><text>&lt;p&gt;</text><text>Since the data present in {@link ComponentData#info} could be quite large,</text><text>{@name #fingerprint} provides a convenient way to check if the data for a</text><text>particular component is updated.</text><text>&lt;p&gt;</text><text>You should store the fingerprint associated with a component. After an update,</text><text>by invoking the {@link com.vmware.vapi.metadata.metamodel.Component#fingerprint}</text><text>{@term operation}, you can retrieve the new fingerprint for the component. If the new</text><text>fingerprint and the previously stored fingerprint do not match, clients can</text><text>use the {@link com.vmware.vapi.metadata.metamodel.Component#get} to retrieve the</text><text>new metamodel information for the component.</text></description></doc></attribute></structure><structure name='ComponentInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ComponentInfo} {@term structure} contains metamodel metadata</text><text>information about a component element.</text></description></doc><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Dot separated name of the component element. The segments in the name reflect</text><text>the organization of the APIs. The format of each segment is lower case</text><text>with underscores. Each underscore represents a word boundary. If there</text><text>are acronyms in the word, the capitalization is preserved. This format</text><text>makes it easy to translate the segment into a different naming convention.</text></description></doc></attribute><attribute name='packages'><type generic='Map'><type primitive='ID'/><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.PackageInfo'/></type><doc><description index='0'><text>Metamodel metadata information of all the package elements contained in the</text><text>component element. The key in the {@term map} is the identifier of the package</text><text>element and the value in the {@term map} is the metamodel information of the package</text><text>element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata for the component element. The key in the {@term map} is</text><text>the name of the metadata element and the value is the data associated</text><text>with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains</text><text>possible string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for a component. It can contain HTML</text><text>markup and documentation tags (similar to Javadoc tags). The first</text><text>sentence of the package documentation is a complete sentence that identifies</text><text>the component by name and summarizes the purpose of the component.</text></description></doc></attribute></structure><structure name='ConstantInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ConstantInfo} {@term structure} contains metamodel information</text><text>of the constant elements.</text></description></doc><attribute name='type'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Type'/><doc><description index='0'><text>Type of the constant element.</text></description></doc></attribute><attribute name='value'><type reference='ConstantValue' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ConstantValue'/><doc><description index='0'><text>Value of the constant element.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for the constant element. It can</text><text>contain HTML markup and documentation tags (similar to Javadoc tags).</text></description></doc></attribute></structure><structure name='ConstantValue' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ConstantValue} {@term structure} contains the metamodel</text><text>information of the constant element.</text></description></doc><enumeration name='Category' namespace='com.vmware.vapi.metadata.metamodel.ConstantValue'><doc><description index='0'><text>The {@name Category} {@term enumerated type} defines</text><text>{@term enumeration values} for the valid kinds of values.</text></description></doc><constant name='PRIMITIVE'><type reference='Category' namespace='com.vmware.vapi.metadata.metamodel.ConstantValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ConstantValue.Category'/><doc><description index='0'><text>Indicates the type of constant value is primitive.</text></description></doc><value></value></constant><constant name='LIST'><type reference='Category' namespace='com.vmware.vapi.metadata.metamodel.ConstantValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ConstantValue.Category'/><doc><description index='0'><text>Indicates the type of constant value is a list.</text></description></doc><value></value></constant></enumeration><attribute name='category'><type reference='Category' namespace='com.vmware.vapi.metadata.metamodel.ConstantValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ConstantValue.Category'/><doc><description index='0'><text>Category of the type of constant value.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='primitiveValue'><type reference='PrimitiveValue' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.PrimitiveValue'/><doc><description index='0'><text>Primitive value of the constant element.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>category</entry><entry key='value' type='java.lang.String'>PRIMITIVE</entry></property></metadata></attribute><attribute name='listValue'><type generic='List'><type reference='PrimitiveValue' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.PrimitiveValue'/></type><doc><description index='0'><text>List value of the constant element.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>category</entry><entry key='value' type='java.lang.String'>LIST</entry></property></metadata></attribute></structure><structure name='ElementMap' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ElementMap} {@term structure} contains the metadata</text><text>elements.</text><text>&lt;p&gt;</text><text>One of the sources for metadata is the annotations present in</text><text>the interface definition language. When an annotation is represented</text><text>in the {@name ElementMap}, {@name ElementMap} describes the data</text><text>specified in the arguments for the annotation.</text><text>&lt;p&gt;</text><text>For example, in {@code @UnionCase(tag="tag", value="SELECT")}, ElementMap</text><text>describes the keyword arguments tag and value.</text></description></doc><attribute name='elements'><type generic='Map'><type primitive='String'/><type reference='ElementValue' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementValue'/></type><doc><description index='0'><text>Metamodel information of the metadata elements. The key</text><text>parameter of the {@term map} is the identifier for the element and the value</text><text>corresponds to the element value.</text></description></doc></attribute></structure><structure name='ElementValue' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ElementValue} {@term structure} describes the value of the</text><text>metadata element.</text></description></doc><enumeration name='Type' namespace='com.vmware.vapi.metadata.metamodel.ElementValue'><doc><description index='0'><text>The {@name Type} {@term enumerated type} defines the valid types</text><text>for values in metadata elements.</text></description></doc><constant name='LONG'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.ElementValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ElementValue.Type'/><doc><description index='0'><text>Indicates the type of the value is a long (64 bit signed integer).</text></description></doc><value></value></constant><constant name='STRING'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.ElementValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ElementValue.Type'/><doc><description index='0'><text>Indicates the type of the value is a string (a variable length</text><text>sequence of characters). The encoding is UTF-8.</text></description></doc><value></value></constant><constant name='STRING_LIST'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.ElementValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ElementValue.Type'/><doc><description index='0'><text>Indicates the type of the value is a list of strings.</text></description></doc><value></value></constant><constant name='STRUCTURE_REFERENCE'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.ElementValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ElementValue.Type'/><doc><description index='0'><text>Indicates the type of the value is an identifier for a</text><text>structure element.</text></description></doc><value></value></constant><constant name='STRUCTURE_REFERENCE_LIST'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.ElementValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ElementValue.Type'/><doc><description index='0'><text>Indicates the type of the value is a list of identifiers for a</text><text>structure element.</text></description></doc><value></value></constant></enumeration><attribute name='type'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.ElementValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.ElementValue.Type'/><doc><description index='0'><text>Type of the value.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='longValue'><type primitive='long'/><doc><description index='0'><text>Long value of the metadata element.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>LONG</entry></property></metadata></attribute><attribute name='stringValue'><type primitive='String'/><doc><description index='0'><text>String value of the metadata element.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>STRING</entry></property></metadata></attribute><attribute name='listValue'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>List of strings value of the metadata element.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>STRING_LIST</entry></property></metadata></attribute><attribute name='structureId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the structure element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>STRUCTURE_REFERENCE</entry></property><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata></attribute><attribute name='structureIds'><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>List of identifiers of the structure elements.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must contain identifiers for the resource type: {@code com.vmware.vapi.structure}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will contain identifiers for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>STRUCTURE_REFERENCE_LIST</entry></property><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata></attribute></structure><structure name='EnumerationInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name EnumerationInfo} {@term structure} contains the metamodel</text><text>information of an enumeration element.</text></description></doc><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Dot separated name of the enumeration element. The segments in the name reflect</text><text>the organization of the APIs. The format of each segment is lower case</text><text>with underscores. Each underscore represents a word boundary. If there</text><text>are acronyms in the word, the capitalization is preserved. This format</text><text>makes it easy to translate the segment into a different naming convention.</text></description></doc></attribute><attribute name='values'><type generic='List'><type reference='EnumerationValueInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.EnumerationValueInfo'/></type><doc><description index='0'><text>Metamodel information of all the enumeration value elements contained</text><text>in this enumeration element. The order of the enumeration value elements</text><text>in the list is same as the order in which they are defined in the interface</text><text>definition file.</text></description></doc></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata elements for an enumeration element. The key in the</text><text>{@term map} is the name of the metadata element and the value is the data associated</text><text>with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains</text><text>possible string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for an enumeration element. It can contain HTML</text><text>markup and Javadoc tags. The first sentence of the enumeration documentation is a</text><text>complete sentence that identifies the enumeration by name and summarizes the purpose</text><text>of the enumeration. The documentation describes the context in which the enumeration</text><text>is used.</text><text>&lt;p&gt;</text><text>The documentation also contains references to the context in which the enumeration</text><text>is used. But if the enumeration is used in many contexts, the references may</text><text>not be present.</text></description></doc></attribute></structure><structure name='EnumerationValueInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name EnumerationValueInfo} {@term structure} describes the</text><text>{@term enumeration value} in the {@term enumerated type}.</text></description></doc><attribute name='value'><type primitive='String'/><doc><description index='0'><text>Value in the enumerated type. All the characters in the string are</text><text>capitalized.</text></description></doc></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Additional metadata for enumeration value in the enumerated type.</text><text>The key in the {@term map} is the name of the metadata element</text><text>and the value is the data associated with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier}</text><text>contains possible string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for an enumeration value. It can contain</text><text>HTML markup and documentation tags (similar to Javadoc tags). The first</text><text>statement will be a noun or verb phrase that describes the purpose of</text><text>the enumeration value.</text></description></doc></attribute></structure><structure name='ErrorInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ErrorInfo} {@term structure} contains the metadata information</text><text>about the error elements contained in an operation element.</text></description></doc><attribute name='structureId'><type primitive='ID'/><doc><description index='0'><text>Identifier for the structure element corresponding to the error that is</text><text>being reported by the operation.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>The English language documentation for the service element. It can contain HTML</text><text>markup and Javadoc tags.</text></description></doc></attribute></structure><structure name='FieldInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name FieldInfo} {@term structure} contains metamodel information</text><text>of a field element contained in a structure element.</text></description></doc><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Name of the field element in a canonical format. The format is lower case</text><text>with underscores. Each underscore represents a word boundary. If there</text><text>are acronyms in the word, the capitalization is preserved. This format</text><text>makes it easy to translate the segment into a different naming convention.</text></description></doc></attribute><attribute name='type'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Type'/><doc><description index='0'><text>Type information.</text></description></doc></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata elements for the field element. The key in the</text><text>{@term map} is the name of the metadata element and the value is the data</text><text>associated with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains</text><text>possible string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for the service element. It can contain HTML</text><text>markup and Javadoc tags.</text></description></doc></attribute></structure><structure name='GenericInstantiation' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name GenericInstantiation} {@term structure} describes the type information</text><text>of a typed element when the type is an instantiation of one of the generic</text><text>types provided by the infrastructure.</text></description></doc><enumeration name='GenericType' namespace='com.vmware.vapi.metadata.metamodel.GenericInstantiation'><doc><description index='0'><text>The {@name GenericType} {@term enumerated type} provides</text><text>{@term enumeration values} for each of the generic types provided by</text><text>the infrastructure.</text></description></doc><constant name='LIST'><type reference='GenericType' namespace='com.vmware.vapi.metadata.metamodel.GenericInstantiation' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.GenericInstantiation.GenericType'/><doc><description index='0'><text>Indicates the generic type is a list.</text></description></doc><value></value></constant><constant name='MAP'><type reference='GenericType' namespace='com.vmware.vapi.metadata.metamodel.GenericInstantiation' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.GenericInstantiation.GenericType'/><doc><description index='0'><text>Indicates the generic type is a map.</text></description></doc><value></value></constant><constant name='OPTIONAL'><type reference='GenericType' namespace='com.vmware.vapi.metadata.metamodel.GenericInstantiation' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.GenericInstantiation.GenericType'/><doc><description index='0'><text>Indicates the generic type is an optional.</text></description></doc><value></value></constant><constant name='SET'><type reference='GenericType' namespace='com.vmware.vapi.metadata.metamodel.GenericInstantiation' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.GenericInstantiation.GenericType'/><doc><description index='0'><text>Indicates the generic type is a set.</text></description></doc><value></value></constant></enumeration><attribute name='genericType'><type reference='GenericType' namespace='com.vmware.vapi.metadata.metamodel.GenericInstantiation' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.GenericInstantiation.GenericType'/><doc><description index='0'><text>The generic type that is being instantiated.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='elementType'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Type'/><doc><description index='0'><text>Type of the element parameter if the generic type</text><text>instantiation is a {@link GenericType#LIST},</text><text>{@link GenericType#OPTIONAL} or {@link GenericType#SET}.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>genericType</entry><entry key='value' type='java.util.List'><item type='java.lang.String'>LIST</item><item type='java.lang.String'>OPTIONAL</item><item type='java.lang.String'>SET</item></entry></property></metadata></attribute><attribute name='mapKeyType'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Type'/><doc><description index='0'><text>Type of the key parameter of the map generic type instantiation.</text><text>The map generic type has a key parameter and value parameter. The type</text><text>of the value parameter is described by {@link GenericInstantiation#mapValueType}..</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>genericType</entry><entry key='value' type='java.lang.String'>MAP</entry></property></metadata></attribute><attribute name='mapValueType'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Type'/><doc><description index='0'><text>Type of the value parameter of the map generic type instantiation.</text><text>The map generic type has a key parameter and value parameter. The type</text><text>of the key parameter is described by {@link GenericInstantiation#mapKeyType}..</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>genericType</entry><entry key='value' type='java.lang.String'>MAP</entry></property></metadata></attribute></structure><structure name='OperationInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name OperationInfo} {@term structure} contains metamodel information</text><text>of an operation element.</text></description></doc><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Name of the operation element in a canonical format. The format is lower case</text><text>with underscores. Each underscore represents a word boundary. If there</text><text>are acronyms in the word, the capitalization is preserved. This format</text><text>makes it easy to translate the segment into a different naming convention.</text></description></doc></attribute><attribute name='params'><type generic='List'><type reference='FieldInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.FieldInfo'/></type><doc><description index='0'><text>Metamodel information for the parameter elements. The order of the parameters</text><text>elements in the list is same as the order of the parameters declared in the</text><text>interface definition file.</text></description></doc></attribute><attribute name='output'><type reference='OperationResultInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.OperationResultInfo'/><doc><description index='0'><text>Metamodel type for the output element.</text></description></doc></attribute><attribute name='errors'><type generic='List'><type reference='ErrorInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ErrorInfo'/></type><doc><description index='0'><text>List of error elements that might be reported by the operation element. If the</text><text>operation reports the same error for more than one reason, the list contains</text><text>the error element associated with the error more than once with different</text><text>documentation elements.</text></description></doc></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata elements for the operation element. The key in the</text><text>{@term map} is the name of the metadata element and the value is the data associated</text><text>with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains</text><text>possible string values for key in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for the service element. It can contain HTML</text><text>markup and Javadoc tags.</text></description></doc></attribute></structure><structure name='OperationResultInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name OperationResultInfo} {@term structure} contains the</text><text>metamodel information of an operation result element.</text><text>&lt;p&gt;</text><text>An operation accepts a list of parameters and returns a result or an</text><text>error. The {@name OperationResultInfo} describes the result element</text><text>of an operation.</text></description></doc><attribute name='type'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Type'/><doc><description index='0'><text>Type information of the operation result element.</text></description></doc></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata elements for the service element. The key in the</text><text>{@term map} is the name of the metadata element and the value is the data associated</text><text>with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains</text><text>possible string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for the operation result element. It can</text><text>contain HTML markup and Javadoc tags.</text></description></doc></attribute></structure><structure name='PackageInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name PackageInfo} {@term structure} contains the metamodel information of</text><text>all the service elements, structure elements and enumeration elements contained</text><text>in the package element.</text></description></doc><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Dot separated name of the package element. The segments in the name reflect</text><text>the organization of the APIs. The format of each segment is lower case</text><text>with underscores. Each underscore represents a word boundary. If there</text><text>are acronyms in the word, the capitalization is preserved. This format</text><text>makes it easy to translate the segment into a different naming convention.</text></description></doc></attribute><attribute name='structures'><type generic='Map'><type primitive='ID'/><type reference='StructureInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.StructureInfo'/></type><doc><description index='0'><text>Metamodel information of all the structure elements contained in the</text><text>package element. The key in the {@term map} is the identifier of the structure</text><text>element and the value in the {@term map} is the metamodel information for the structure</text><text>element.</text><text>&lt;p&gt;</text><text>This does not include the structure elements contained in the service</text><text>elements that are contained in this package element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata></attribute><attribute name='enumerations'><type generic='Map'><type primitive='ID'/><type reference='EnumerationInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.EnumerationInfo'/></type><doc><description index='0'><text>Metamodel information of all the enumeration elements contained in the</text><text>package element. The key in the {@term map} is the identifier of the enumeration</text><text>element and the value in the {@term map} is the metamodel information for the enumeration</text><text>element.</text><text>&lt;p&gt;</text><text>This does not include the enumeration elements that are contained in the</text><text>service elements of this package element or structure elements of this</text><text>package element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.enumeration}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.enumeration}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.enumeration</property></metadata></attribute><attribute name='services'><type generic='Map'><type primitive='ID'/><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ServiceInfo'/></type><doc><description index='0'><text>Metamodel information of all the service elements contained in the</text><text>package element. The key in the {@term map} is the identifier of the service</text><text>element and the value in the {@term map} is the metamodel information for the</text><text>service element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata elements for the package element. The key in the</text><text>{@term map} is the name of the metadata element and the value is the data associated</text><text>with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains</text><text>possible string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for a package. It can contain HTML</text><text>markup and Javadoc tags. The first sentence of the package documentation is a</text><text>complete sentence that identifies the package by name and summarizes the purpose</text><text>of the package.</text><text>&lt;p&gt;</text><text>The primary purpose of a package documentation is to provide high-level</text><text>context that will provide a framework in which the users can put the detail</text><text>about the package contents.</text></description></doc></attribute></structure><structure name='PrimitiveValue' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name PrimitiveValue} {@term structure} contains</text><text>value of the constant element.</text></description></doc><enumeration name='Type' namespace='com.vmware.vapi.metadata.metamodel.PrimitiveValue'><doc><description index='0'><text>The {@name Type} {@term enumerated type} defines the valid</text><text>types for values in constant elements.</text></description></doc><constant name='BOOLEAN'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.PrimitiveValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.PrimitiveValue.Type'/><doc><description index='0'><text>Indicates the value is a boolean (true or false).</text></description></doc><value></value></constant><constant name='DOUBLE'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.PrimitiveValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.PrimitiveValue.Type'/><doc><description index='0'><text>Indicates the value is a double (64 bit floating number).</text></description></doc><value></value></constant><constant name='LONG'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.PrimitiveValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.PrimitiveValue.Type'/><doc><description index='0'><text>Indicates the value is a long (64 bit signed integer).</text></description></doc><value></value></constant><constant name='STRING'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.PrimitiveValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.PrimitiveValue.Type'/><doc><description index='0'><text>Indicates the value is a string (a variable length sequence</text><text>of characters). The encoding is UTF8.</text></description></doc><value></value></constant></enumeration><attribute name='type'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.PrimitiveValue' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.PrimitiveValue.Type'/><doc><description index='0'><text>Type of the constant value.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='booleanValue'><type primitive='boolean'/><doc><description index='0'><text>Boolean value of the constant.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>BOOLEAN</entry></property></metadata></attribute><attribute name='doubleValue'><type primitive='double'/><doc><description index='0'><text>Double value of the constant.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>DOUBLE</entry></property></metadata></attribute><attribute name='longValue'><type primitive='long'/><doc><description index='0'><text>Long value of the constant.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>LONG</entry></property></metadata></attribute><attribute name='stringValue'><type primitive='String'/><doc><description index='0'><text>String value of the constant.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>STRING</entry></property></metadata></attribute></structure><structure name='ServiceInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name ServiceInfo} {@term structure} contains the metamodel information</text><text>of all the operation elements, structure elements and enumeration elements</text><text>containted in a service element.</text></description></doc><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Dot separated name of the service element. The segments in the name reflect</text><text>the organization of the APIs. The format of each segment is lower case</text><text>with underscores. Each underscore represents a word boundary. If there</text><text>are acronyms in the word, the capitalization is preserved. This format</text><text>makes it easy to translate the segment into a different naming convention.</text></description></doc></attribute><attribute name='operations'><type generic='Map'><type primitive='ID'/><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.OperationInfo'/></type><doc><description index='0'><text>Metamodel information of all the operation elements contained in the</text><text>service element. The key in the {@term map} is the identifier of the operation</text><text>element and the value in the {@term map} is the metamodel information for the</text><text>operation element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata></attribute><attribute name='structures'><type generic='Map'><type primitive='ID'/><type reference='StructureInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.StructureInfo'/></type><doc><description index='0'><text>Metamodel information of all the structure elements contained in the</text><text>service element. The key in the {@term map} is the identifier of the structure</text><text>element and the value in the {@term map} is the metamodel information for the</text><text>structure element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata></attribute><attribute name='enumerations'><type generic='Map'><type primitive='ID'/><type reference='EnumerationInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.EnumerationInfo'/></type><doc><description index='0'><text>Metamodel information of all the enumeration elements contained in the</text><text>service element. The key in the {@term map} is the identifier of the enumeration</text><text>element and the value in the {@term map} is the metamodel information for the</text><text>enumeration element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.enumeration}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.enumeration}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.enumeration</property></metadata></attribute><attribute name='constants'><type generic='Map'><type primitive='String'/><type reference='ConstantInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ConstantInfo'/></type><doc><description index='0'><text>Metamodel information of all the constant elements contained in the</text><text>service element. The key in the {@term map} is the name of the constant element and</text><text>the value in the {@term map} is the metamodel information for the contant element.</text></description></doc></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata elements for the service element. The key in the</text><text>{@term map} is the name of the metadata element and the value is the data associated</text><text>with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains</text><text>possible string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for the service element. It can contain HTML</text><text>markup and Javadoc tags. The first sentence of the service documentation is a</text><text>complete sentence that identifies the service by name and summarizes the purpose</text><text>of the service. The remaining part of the documentation provides a summary of</text><text>how to use the operations defined in the service.</text></description></doc></attribute></structure><structure name='StructureInfo' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name StructureInfo} {@term structure} contains the metamodel information</text><text>of all the field elements, constant elements and enumeration elements</text><text>contained in the structure element.</text><text>&lt;p&gt;</text><text>In the interface definition language, API designers have the ability to include</text><text>all the fields from one structure to another structure. This is done by using</text><text>an annotation {@code @Include} on the structure in which we want to add the fields.</text><text>If this annotation is present, the list of fields in the {@name StructureInfo} will</text><text>also contain the fields that are being included. The annotation information is</text><text>also retained in the {@link StructureInfo#metadata} element as well.</text></description></doc><enumeration name='Type' namespace='com.vmware.vapi.metadata.metamodel.StructureInfo'><doc><description index='0'><text>The {@name Type} {@term enumerated type} defines the kind of this structure</text><text>element. In the interface definition language, structure element and</text><text>error element have similar characteristics. The difference is that only</text><text>error elements can be used to describe the {@term errors} of an operation</text><text>element.</text></description></doc><constant name='STRUCTURE'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.StructureInfo' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.StructureInfo.Type'/><doc><description index='0'><text>If the type is a structure element.</text></description></doc><value></value></constant><constant name='ERROR'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.StructureInfo' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.StructureInfo.Type'/><doc><description index='0'><text>If the type is an error element.</text></description></doc><value></value></constant></enumeration><attribute name='name'><type primitive='String'/><doc><description index='0'><text>Dot separated name of the structure element. The segments in the name reflect</text><text>the organization of the APIs. The format of each segment is lower case</text><text>with underscores. Each underscore represents a word boundary. If there</text><text>are acronyms in the word, the capitalization is preserved. This format</text><text>makes it easy to translate the segment into a different naming convention.</text></description></doc></attribute><attribute name='type'><type reference='Type' namespace='com.vmware.vapi.metadata.metamodel.StructureInfo' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.StructureInfo.Type'/><doc><description index='0'><text>Type of the structure.</text></description></doc></attribute><attribute name='enumerations'><type generic='Map'><type primitive='ID'/><type reference='EnumerationInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.EnumerationInfo'/></type><doc><description index='0'><text>Metamodel information of all the enumeration elements contained in the</text><text>structure element. The key in the {@term map} is the identifier</text><text>of the enumeration element and the value is the metamodel information of the</text><text>enumeration element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.enumeration}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.enumeration}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.enumeration</property></metadata></attribute><attribute name='constants'><type generic='Map'><type primitive='String'/><type reference='ConstantInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ConstantInfo'/></type><doc><description index='0'><text>Metamodel information of all the constant elements contained in the structure</text><text>element. The key in the {@term map} is the name of the constant element and</text><text>the value in the {@term map} is the metamodel information for the constant element.</text></description></doc></attribute><attribute name='fields'><type generic='List'><type reference='FieldInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.FieldInfo'/></type><doc><description index='0'><text>Metamodel information of all the field elements. The order of the field elements</text><text>in the list matches the order in which the fields are defined in the service.</text></description></doc></attribute><attribute name='metadata'><type generic='Map'><type primitive='String'/><type reference='ElementMap' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ElementMap'/></type><doc><description index='0'><text>Generic metadata elements for the structure element. The key in the</text><text>{@term map} is the name of the metadata element and the value is the data associated</text><text>with that metadata element.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.MetadataIdentifier} contains possible</text><text>string values for keys in the {@term map}.</text></description></doc></attribute><attribute name='documentation'><type primitive='String'/><doc><description index='0'><text>English language documentation for a structure element. It can contain HTML</text><text>markup and Javadoc tags. The first sentence of the structure documentation is a</text><text>complete sentence that identifies the structure by name and summarizes the purpose</text><text>of the structure.</text></description></doc></attribute></structure><structure name='Type' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name Type} {@term structure} describes the type information of</text><text>a typed element in the interface definiton language. The following</text><text>elements in the metamodel are typed:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Field element in a structure element. See {@link StructureInfo#fields}&lt;/li&gt;</text><text>&lt;li&gt;Parameter element in an operation element. See {@link OperationInfo#params}&lt;/li&gt;</text><text>&lt;li&gt;Result element in an operation element. See {@link OperationInfo#output}&lt;/li&gt;</text><text>&lt;/ul&gt;</text><text>The type could be one of the three following categories:</text><text>&lt;ul&gt;</text><text>&lt;li&gt;Built-in types: These are types present in the interface definition language</text><text>type system. They are provided by the infrastructure. &lt;/li&gt;</text><text>&lt;li&gt;User defined named type: API designers can create custom types and use them</text><text>for the typed elements. These types have a unique identifier.&lt;/li&gt;</text><text>&lt;li&gt;Generic type instantiation: The language infrastructure also provides</text><text>generic types such as list, map, set and so on. An instantiation of one of</text><text>these generic types could also be used for the typed elements.&lt;/li&gt;</text><text>&lt;/ul&gt;</text></description></doc><enumeration name='Category' namespace='com.vmware.vapi.metadata.metamodel.Type'><doc><description index='0'><text>The {@name Category} {@term enumerated type} provides {@term enumeration value} for</text><text>each category of the type.</text></description></doc><constant name='BUILTIN'><type reference='Category' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.Category'/><doc><description index='0'><text>The type is one of the built-in types specified in {@link BuiltinType}</text></description></doc><value></value></constant><constant name='USER_DEFINED'><type reference='Category' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.Category'/><doc><description index='0'><text>The type is one of the user defined named types.</text></description></doc><value></value></constant><constant name='GENERIC'><type reference='Category' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.Category'/><doc><description index='0'><text>The type is an instantiation of one of the generic types.</text></description></doc><value></value></constant></enumeration><enumeration name='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type'><doc><description index='0'><text>The {@name BuiltinType} {@term enumerated type} provides {@term enumeration value}</text><text>for each of the built-in types present in the interface definition language type system.</text></description></doc><constant name='VOID'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a void. The value is {@term unset}.</text></description></doc><value></value></constant><constant name='BOOLEAN'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a boolean. The value is true or false.</text></description></doc><value></value></constant><constant name='LONG'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a long. The value is a 64 bit</text><text>signed integer.</text></description></doc><value></value></constant><constant name='DOUBLE'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a double. The value is a</text><text>64 bit floating point number.</text></description></doc><value></value></constant><constant name='STRING'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a string. The value is a variable-length</text><text>sequence of zero or more unicode characters.</text></description></doc><value></value></constant><constant name='BINARY'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a binary. The value is a variable-length</text><text>sequence of zero or more bytes.</text></description></doc><value></value></constant><constant name='SECRET'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a secret. The value is a variable-length</text><text>sequence of zero or more unicode characters. The value contains sensitive</text><text>data that should not be printed or displayed anywhere.</text></description></doc><value></value></constant><constant name='DATE_TIME'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a datetime. The value should be in the UTC timezone</text><text>and the precision is milliseconds.</text></description></doc><value></value></constant><constant name='ID'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is an ID. The value represents an</text><text>identifier for a resource.</text></description></doc><value></value></constant><constant name='URI'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is an URI. The value follows the IRI</text><text>specification in RFC 3987.</text></description></doc><value></value></constant><constant name='ANY_ERROR'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is an arbitrary {@term error} type. This is used if the</text><text>value of a typed element can be one of any user defined named type</text><text>which is an {@term error}.</text></description></doc><value></value></constant><constant name='DYNAMIC_STRUCTURE'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is a dynamic structure. This is used if the value</text><text>of a typed element can be one of any user defined named type.</text></description></doc><value></value></constant><constant name='OPAQUE'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>The built-in type is an opaque. This is used if the value of a typed</text><text>element could be of any type and the actual type will be known only</text><text>during the execution of the API. This is mostly used in infrastructure</text><text>{@term services}.</text></description></doc><value></value></constant></enumeration><attribute name='category'><type reference='Category' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.Category'/><doc><description index='0'><text>Category of this type.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='builtinType'><type reference='BuiltinType' namespace='com.vmware.vapi.metadata.metamodel.Type' target='ENUMERATION' declaration='com.vmware.vapi.metadata.metamodel.Type.BuiltinType'/><doc><description index='0'><text>Category of the built-in type.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>category</entry><entry key='value' type='java.lang.String'>BUILTIN</entry></property></metadata></attribute><attribute name='userDefinedType'><type reference='UserDefinedType' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.UserDefinedType'/><doc><description index='0'><text>Identifier and type of the user defined type.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>category</entry><entry key='value' type='java.lang.String'>USER_DEFINED</entry></property></metadata></attribute><attribute name='genericInstantiation'><type reference='GenericInstantiation' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.GenericInstantiation'/><doc><description index='0'><text>Instantiation of one of the generic types available in the interface</text><text>definition language.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>category</entry><entry key='value' type='java.lang.String'>GENERIC</entry></property></metadata></attribute></structure><structure name='UserDefinedType' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name UserDefinedType} {@term structure} contains the metamodel</text><text>type information of a typed element whose type is a user defined named</text><text>type.</text></description></doc><attribute name='resourceType'><type primitive='String'/><doc><description index='0'><text>Category of the user defined named type. The named type could be</text><text>a structure element or an enumeration element.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be one of {@code com.vmware.vapi.structure} or {@code com.vmware.vapi.enumeration}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be one of {@code com.vmware.vapi.structure} or {@code com.vmware.vapi.enumeration}.</text></content></doc><metadata><property name='IsOneOf' type='java.util.List'><item type='java.lang.String'>com.vmware.vapi.structure</item><item type='java.lang.String'>com.vmware.vapi.enumeration</item></property></metadata></attribute><attribute name='resourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the user defined named type.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the {@term field} must be an identifier for one of these resource types: {@code com.vmware.vapi.structure} or {@code com.vmware.vapi.enumeration}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the {@term field} will be an identifier for one of these resource types: {@code com.vmware.vapi.structure} or {@code com.vmware.vapi.enumeration}.</text></content></doc><metadata><property name='Resource' type='java.util.Map'><entry key='value' type='java.util.List'><item type='com.vmware.vapi.idl.model.IdlConstantRef'><type reference='STRUCTURE' namespace='com.vmware.vapi.metadata.Resources' target='CONSTANT' declaration='com.vmware.vapi.metadata.Resources.STRUCTURE' symbol='Resources.STRUCTURE'/></item><item type='com.vmware.vapi.idl.model.IdlConstantRef'><type reference='ENUMERATION' namespace='com.vmware.vapi.metadata.Resources' target='CONSTANT' declaration='com.vmware.vapi.metadata.Resources.ENUMERATION' symbol='Resources.ENUMERATION'/></item></entry><entry key='typeHolder' type='java.lang.String'>resourceType</entry></property></metadata></attribute></structure><service name='Component' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name Component} {@term service} providers {@term operations}</text><text>to retrieve metamodel information of a component element.</text><text>&lt;p&gt;</text><text>A component defines a set of functionality that is deployed together and</text><text>versioned together. For example, all the {@term services} that belong to</text><text>VMware Content Library are part of a single component. A component</text><text>element describes a component. A component element contains one or more</text><text>package elements.</text><text>&lt;p&gt;</text><text>The {@term operations} for package elements are provided by {@term service}</text><text>{@link com.vmware.vapi.metadata.metamodel.Package}.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.component</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for component.</text></description></doc><value>com.vmware.vapi.component</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the component elements that are registered</text><text>with the infrastructure.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the component elements that are</text><text>registered with the infrastructure.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves metamodel information about the component element corresponding</text><text>to {@param.name componentId}.</text><text>&lt;p&gt;</text><text>The {@link ComponentData} contains the metamodel information about the</text><text>component and it's fingerprint. It contains information about all the</text><text>package elements that are contained in this component element.</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the component element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the component element associated with {@param.name componentId}</text><text>is not registered with the infrastructure.</text></description></doc></error><result><type reference='ComponentData' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ComponentData'/><doc><description index='0'><text>The {@link ComponentData} instance that corresponds to</text><text>{@param.name componentId}.</text></description></doc></result></operation><operation name='fingerprint'><doc><description index='0'><text>Retrieves the fingerprint computed from the metamodel metadata of</text><text>the component element corresponding to {@param.name componentId}.</text><text>&lt;p&gt;</text><text>The fingerprint provides clients an efficient way to check if the metadata</text><text>for a particular component element has been modified on the server. The</text><text>client can do this by comparing the result of this operation with the</text><text>fingerprint returned in the result of</text><text>{@link com.vmware.vapi.metadata.metamodel.Component#get}.</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the component element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the component element associated with {@param.name componentId}</text><text>is not registered with the infrastructure.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>The fingerprint computed from the metamodel metadata of the</text><text>component element.</text></description></doc></result></operation></service><service name='Enumeration' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name Enumeration} {@term service} provides {@term operations}</text><text>to retrieve metamodel information about an enumeration element in the</text><text>interface definition language.</text><text>&lt;p&gt;</text><text>The {@name Enumeration} has a list of enumeration value elements.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.enumeration</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for enumeration.</text></description></doc><value>com.vmware.vapi.enumeration</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the enumeration elements that are</text><text>contained in all the package elements, service elements and</text><text>structure elements.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the enumeration elements.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.enumeration}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the enumeration element corresponding to</text><text>{@param.name enumerationId}.</text><text>&lt;p&gt;</text><text>The {@link EnumerationInfo} contains the metamodel information about the</text><text>enumeration value element contained in the enumeration element.</text></description></doc><parameter name='enumerationId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the enumeration element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.enumeration}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the enumeration element associated with {@param.name enumerationId}</text><text>is not contained in any of the package elements, service</text><text>elements and structure elements.</text></description></doc></error><result><type reference='EnumerationInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.EnumerationInfo'/><doc><description index='0'><text>The {@link EnumerationInfo} instance that corresponds to</text><text>{@param.name enumerationId}</text></description></doc></result></operation></service><service name='MetadataIdentifier' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name MetadataIdentifier} {@term service} provides</text><text>string constants that can be used as identifiers for the metadata</text><text>elements.</text><text>&lt;p&gt;</text><text>Most of the types in {@link com.vmware.vapi.metadata.metamodel} package</text><text>has a metadata field whose type is {@code Map&lt;String, ElementMap&gt;}.</text><text>{@link MetadataIdentifier} contains the identifiers used in the keys of the</text><text>above Map type.</text></description></doc><constant name='CANONICAL_NAME'><type primitive='String'/><doc><description index='0'><text>Identifier representing the CanonicalName metadata.</text></description></doc><value>CanonicalName</value></constant><constant name='COMPONENT'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Component metadata.</text></description></doc><value>Component</value></constant><constant name='CREATE'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Create metadata.</text></description></doc><value>Create</value></constant><constant name='CRUD'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Crud metadata.</text></description></doc><value>Crud</value></constant><constant name='HAS_FIELDS_OF'><type primitive='String'/><doc><description index='0'><text>Identifier representing the HasFieldsOf metadata.</text></description></doc><value>HasFieldsOf</value></constant><constant name='INCLUDABLE'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Includable metadata.</text></description></doc><value>Includable</value></constant><constant name='INCLUDE'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Include metadata.</text></description></doc><value>Include</value></constant><constant name='IS_ONE_OF'><type primitive='String'/><doc><description index='0'><text>Identifier representing the IsOneOf metadata.</text></description></doc><value>IsOneOf</value></constant><constant name='MODEL'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Model metadata.</text></description></doc><value>Model</value></constant><constant name='READ'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Read metadata.</text></description></doc><value>Read</value></constant><constant name='RESOURCE'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Resource metadata.</text></description></doc><value>Resource</value></constant><constant name='UNION_CASE'><type primitive='String'/><doc><description index='0'><text>Identifier representing the UnionCase metadata.</text></description></doc><value>UnionCase</value></constant><constant name='UNION_TAG'><type primitive='String'/><doc><description index='0'><text>Identifier representing the UnionTag metadata.</text></description></doc><value>UnionTag</value></constant><constant name='UPDATE'><type primitive='String'/><doc><description index='0'><text>Identifier representing the Update metadata.</text></description></doc><value>Update</value></constant></service><service name='Package' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name Package} {@term service} provides {@term operations}</text><text>to retrieve metamodel information about a package element in the</text><text>interface definition language.</text><text>&lt;p&gt;</text><text>A package is a logical grouping of services, structures and</text><text>enumerations. A package element describes the package. It contains</text><text>the service elements, structure elements and enumeration elements</text><text>that are grouped together.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for package.</text></description></doc><value>com.vmware.vapi.package</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the packages elements that are contained</text><text>in all the registered component elements.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the package elements that are</text><text>contained in all the registered component elements.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the package element corresponding to</text><text>{@param.name packagetId}.</text></description></doc><parameter name='packageId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the package element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the package element associated with {@param.name packageId}</text><text>does not exist.</text></description></doc></error><result><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.PackageInfo'/><doc><description index='0'><text>The {@link PackageInfo} instance that corresponds to</text><text>{@param.name packageId}.</text></description></doc></result></operation></service><service name='Resource' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@link Resource} {@term service} provides {@term operations} to</text><text>retrieve information about resource types.</text><text>&lt;p&gt;</text><text>A service is a logical grouping of operations that operate on an</text><text>entity. Each entity is identifier by a namespace (or resource type)</text><text>and an unique identifier.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.resource</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for resource.</text></description></doc><value>com.vmware.vapi.resource</value></constant><operation name='list'><doc><description index='0'><text>Returns the set of resource types present across all the service</text><text>elements contained in all the package elements.</text></description></doc><result><type generic='Set'><type primitive='ID'/></type><doc><description index='0'><text>Set of resource types</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.resource}.</text></content></doc></result></operation></service><service name='Service' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name Service} {@term service} provides {@term operations}</text><text>to retrieve metamodel information about a service element in the</text><text>interface definition language.</text><text>&lt;p&gt;</text><text>A service is a logical grouping of operations that operate on</text><text>some entity. A service element describes a service. It contains</text><text>operation elements that describe the operations grouped in the</text><text>service. It also contains structure elements and enumeration elements</text><text>corresponding to the structures and enumerations defined in the</text><text>service.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for service.</text></description></doc><value>com.vmware.vapi.service</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the service elements that are currently registered</text><text>with the infrastructure.</text><text>&lt;p&gt;</text><text>The list of service elements is an aggregate list of all the service elements</text><text>contained in all the package elements.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the service elements that are currently</text><text>registered with the infrastructure.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the service element corresponding to</text><text>{@param.name serviceId}.</text><text>&lt;p&gt;</text><text>The {@link ServiceInfo} contains the metamodel information for the</text><text>operation elements, structure elements and enumeration elements</text><text>contained in the service element.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId}</text><text>is not registered with the infrastructure.</text></description></doc></error><result><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.ServiceInfo'/><doc><description index='0'><text>The {@link ServiceInfo} instance that corresponds to</text><text>{@param.name serviceId}</text></description></doc></result></operation></service><service name='Source' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name Source} {@term service} provides {@term operations} to</text><text>manage the sources of metamodel metadata information.</text><text>&lt;p&gt;</text><text>The interface definition language infrastructure provides tools to</text><text>generate various kinds of metadata in JSON format from the interface</text><text>definition files and additional properties files. One of the generated</text><text>files contains metamodel information. The generated file can be</text><text>registered as a source of metadata.</text><text>&lt;p&gt;</text><text>The metamodel file contains all the data present in the interface</text><text>definition files. Each metamodel file contains data about one</text><text>component element. When a metamodel file is added as a source,</text><text>each source contributes only one component element's metadata.</text><text>&lt;p&gt;</text><text>Metamodel metadata can also be discovered from a remote server that</text><text>supports the metamodel metadata {@term services} (see</text><text>{@link com.vmware.vapi.metadata.metamodel}). Since multiple components</text><text>can be registered with a single metadata server, when a remote server</text><text>is registered as a source, that source can contribute more than one</text><text>component.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.metadata.metamodel.source</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for metadata source.</text></description></doc><value>com.vmware.vapi.metadata.metamodel.source</value></constant><structure name='Info' namespace='com.vmware.vapi.metadata.metamodel.Source'><doc><description index='0'><text>The {@name Info} {@term structure} contains the metadata source</text><text>information.</text></description></doc><attribute name='description'><type primitive='String'/><doc><description index='0'><text>English language human readable description of the source.</text></description></doc></attribute><attribute name='type'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Type of the metadata source.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='filepath'><type primitive='String'/><doc><description index='0'><text>Absolute file path of the metamodel metadata file that has</text><text>the metamodel information about one component element. The {@name filePath}</text><text>is the path to the file in the server's filesystem.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>FILE</entry></property></metadata></attribute><attribute name='address'><type primitive='URI'/><doc><description index='0'><text>Connection information for the remote server. This must be</text><text>in the format http(s)://IP:port/namespace.</text><text>&lt;p&gt;</text><text>The remote server must support the {@term services} in the</text><text>{@link com.vmware.vapi.metadata.metamodel} {@term package}.</text><text>It must expose metamodel information of one or more</text><text>components.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute></structure><structure name='CreateSpec' namespace='com.vmware.vapi.metadata.metamodel.Source'><doc><description index='0'><text>The {@name CreateSpec} {@term structure} contains the registration</text><text>information of a metamodel source.</text></description></doc><metadata><property name='Include' type='com.vmware.vapi.idl.model.IdlReferenceType'><type reference='SourceCreateSpec' namespace='com.vmware.vapi.metadata' target='STRUCTURE' declaration='com.vmware.vapi.metadata.SourceCreateSpec'/></property></metadata></structure><operation name='create'><doc><description index='0'><text>Creates a new metadata source. Once the server validates the registration</text><text>information of the metadata source, the metamodel metadata is retrieved</text><text>from the source. This populates elements in all the {@term services}</text><text>defined in {@link com.vmware.vapi.metadata.metamodel} {@term package}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>metadata source identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.metamodel.source}.</text></content></doc></parameter><parameter name='spec'><type reference='CreateSpec' namespace='com.vmware.vapi.metadata.metamodel.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Source.CreateSpec'/><doc><description index='0'><text>create specification.</text></description></doc></parameter><error name='AlreadyExists'><type reference='AlreadyExists' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.AlreadyExists'/><doc><description index='0'><text>if the metadata source identifier is already</text><text>registered with the infrastructure.</text></description></doc></error><error name='InvalidArgument'><type reference='InvalidArgument' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.InvalidArgument'/><doc><description index='0'><text>if the type of the source specified in {@link CreateSpec#type}</text><text>is invalid.</text></description><description index='1'><text>if the file specified in {@link CreateSpec#filepath}</text><text>is not a valid JSON file or if the format of the metamodel</text><text>metadata in the JSON file is invalid.</text></description><description index='2'><text>if the URI specified in {@link CreateSpec#address} is unreachable</text><text>or if there is a transport protocol or message protocol mismatch</text><text>between the client and the server or if the remote server do not</text><text>have {@term services} present in {@link com.vmware.vapi.metadata.metamodel}</text><text>{@term package}.</text></description></doc></error><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the file specified in {@link CreateSpec#filepath}</text><text>does not exist.</text></description></doc></error><result></result></operation><operation name='delete'><doc><description index='0'><text>Deletes an existing metamodel metadata source from the infrastructure.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.metamodel.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the metadata source corresponding to</text><text>{@param.name sourceId}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.metamodel.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.metadata.metamodel.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.Source.Info'/><doc><description index='0'><text>The {@link Info} instance that corresponds to</text><text>{@param.name sourceId}</text></description></doc></result></operation><operation name='list'><doc><description index='0'><text>Returns the identifiers of the metadata sources currently registered</text><text>with the infrastructure.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for metadata sources currently</text><text>registered.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.metadata.metamodel.source}.</text></content></doc></result></operation><operation name='reload'><doc><description index='0'><text>Reloads the metamodel metadata from all the metadata sources or of a</text><text>particular metadata source if {@param.name sourceId} is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, all the metadata sources</text><text>are reloaded.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.metamodel.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result></result></operation><operation name='fingerprint'><doc><description index='0'><text>Returns the aggregate fingerprint of metadata from all the metadata</text><text>sources or from a particular metadata source if {@param.name sourceId}</text><text>is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, the fingerprint of all the</text><text>metadata sources is returned.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.metamodel.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>Aggregate fingerprint of all the metadata sources or of a</text><text>particular metadata source.</text></description></doc></result></operation></service><service name='Structure' namespace='com.vmware.vapi.metadata.metamodel'><doc><description index='0'><text>The {@name Structure} {@term service} providers {@term operations}</text><text>to retrieve metamodel information about a structure element in the</text><text>interface definition language.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for structure.</text></description></doc><value>com.vmware.vapi.structure</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the structure elements that are contained</text><text>in all the package elements and service elements.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the structure elements.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the structure element corresponding to</text><text>{@param.name structureId}.</text><text>&lt;p&gt;</text><text>The {@link StructureInfo} contains the metamodel information about the</text><text>structure element. It contains information about all the field elements</text><text>and enumeration elements contained in this structure element.</text></description></doc><parameter name='structureId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the structure element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the structure element associated with {@param.name structureId}</text><text>is not contained in any of the package elements or</text><text>service elements.</text></description></doc></error><result><type reference='StructureInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.StructureInfo'/><doc><description index='0'><text>The {@link StructureInfo} instance that corresponds to</text><text>{@param.name structureId}.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.metamodel.resource'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.metamodel.resource} {@term package} provides</text><text>{@term services} to retrieve metamodel information for resource types.</text></description></doc><service name='Model' namespace='com.vmware.vapi.metadata.metamodel.resource'><doc><description index='0'><text>The {@name Model} {@term service} provides {@term operations} to</text><text>retrieve information about models.</text><text>&lt;p&gt;</text><text>A structure is used as a model if it is used for persisting data</text><text>about an entity. Some of the fields in the model structure are also</text><text>used for creating indexes for querying.</text><text>&lt;p&gt;</text><text>One or more services can operate on the same resource type. One</text><text>or more services can provide the model structure for an entity of this</text><text>resource type. Using {@name Model} {@term service} you can retrieve</text><text>the list of all the structure elements that are model structures for</text><text>a given resource type.</text></description></doc><operation name='list'><doc><description index='0'><text>Returns the set of identifiers for the structure elements that</text><text>are models for the resource type corresponding to {@param.name resourceId}.</text><text>&lt;p&gt;</text><text>The {@link com.vmware.vapi.metadata.metamodel.Structure} {@term service}</text><text>provides {@term operations} to retrieve more details about the structure</text><text>elements corresponding to the identifiers returned by this {@term operation}.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.structure</property></metadata><parameter name='resourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the resource type.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.resource}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.resource</property></metadata></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the resource type associated with {@param.name resourceId}</text><text>does not exist.</text></description></doc></error><result><type generic='Set'><type primitive='ID'/></type><doc><description index='0'><text>The set of identifiers for the models that are associated with the</text><text>resource type in {@param.name resourceId}.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.structure}.</text></content></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.metamodel.service'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.metamodel.service} {@term package} provides</text><text>{@term services} to retrieve metamodel information about the elements contained in a</text><text>service element.</text></description></doc><service name='Hidden' namespace='com.vmware.vapi.metadata.metamodel.service'><doc><description index='0'><text>The {@name Hidden} {@term service} provides {@term operations} to retrieve the</text><text>list of {@term services} that are hidden and should not be exposed in</text><text>various presentation layers of API infrastructure.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata><operation name='list'><doc><description index='0'><text>Returns the {@term service} identifiers that should be hidden.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of {@term service} identifiers that should be hidden.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></result></operation></service><service name='Operation' namespace='com.vmware.vapi.metadata.metamodel.service'><doc><description index='0'><text>The {@name Operation} {@term service} provides {@term operations}</text><text>to retrieve metamodel information of an operation element in the</text><text>interface definition language.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for operation element.</text></description></doc><value>com.vmware.vapi.operation</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the operation elements that are defined</text><text>in the scope of {@param.name serviceId}.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId}</text><text>does not exist in any of the package elements.</text></description></doc></error><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the operation elements that are</text><text>defined in the scope of {@param.name serviceId}.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves the metamodel information about an operation element corresponding</text><text>to {@param.name operationId} contained in the service element corresponding</text><text>to {@param.name serviceId}.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><parameter name='operationId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the operation element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId} does</text><text>not exist in any of the package elements.</text></description><description index='1'><text>if the operation element associated with {@param.name operationId}</text><text>does not exist in the service element.</text></description></doc></error><result><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.metamodel' target='STRUCTURE' declaration='com.vmware.vapi.metadata.metamodel.OperationInfo'/><doc><description index='0'><text>The {@link com.vmware.vapi.metadata.metamodel.OperationInfo} instance</text><text>that corresponds to {@param.name operationId} defined in scope</text><text>{@param.name serviceId}.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.privilege} {@term package} provides</text><text>{@term services} that expose privilege information for operation</text><text>elements across all the service elements.</text><text>&lt;p&gt;</text><text>An entity has a unique identifier and a resource type. An entity</text><text>can either be present in one of the parameter elements or if a</text><text>parameter is a structure element, it could also be present in one</text><text>of the field elements.</text><text>&lt;p&gt;</text><text>Privileges can be assigned to either operation elements or entities</text><text>used in the operation element. A list of privileges can also be applied</text><text>on a package element. This list of privileges would be used as a default</text><text>for all the operation elements and the entities that do not have any</text><text>defined privileges.</text></description></doc><structure name='ComponentData' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name ComponentData} {@term structure} contains the privilege information</text><text>of the component along with its fingerprint.</text></description></doc><attribute name='info'><type reference='ComponentInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.ComponentInfo'/><doc><description index='0'><text>Privilege information of the component. This includes information about all the</text><text>{@term packages} in the component.</text></description></doc></attribute><attribute name='fingerprint'><type primitive='String'/><doc><description index='0'><text>Fingerprint of the metadata of the component.</text><text>&lt;p&gt;</text><text>Privilege information could change when there is an infrastructure update.</text><text>Since the data present in {@link ComponentData#info} could be quite large,</text><text>{@name #fingerprint} provides a convenient way to check if the data for a particular</text><text>component is updated.</text><text>&lt;p&gt;</text><text>You should store the fingerprint associated with a component. After an update,</text><text>by invoking the {@link com.vmware.vapi.metadata.privilege.Component#fingerprint}</text><text>{@term operation}, you can retrieve the new fingerprint for the component.</text><text>If the new fingerprint and the previously stored fingerprint do not match,</text><text>clients can then use the {@link com.vmware.vapi.metadata.privilege.Component#get}</text><text>to retrieve the new privilege information for the component.</text></description></doc></attribute></structure><structure name='ComponentInfo' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name ComponentInfo} {@term structure} contains the privilege</text><text>information of a component element.</text><text>&lt;p&gt;</text><text>For an explanation of privilege information contained within</text><text>component elements, see {@link com.vmware.vapi.metadata.privilege.Component}.</text></description></doc><attribute name='packages'><type generic='Map'><type primitive='ID'/><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.PackageInfo'/></type><doc><description index='0'><text>Privilege information of all the package elements. The key in the</text><text>{@term map} is the identifier of the package element and the value in the {@term map}</text><text>is the privilege information for the package element.</text><text>&lt;p&gt;</text><text>For an explanation of privilege information containment within</text><text>package elements, see {@link com.vmware.vapi.metadata.privilege.Package}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata></attribute></structure><structure name='OperationInfo' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name OperationInfo} {@term structure} contains privilege information</text><text>of an operation element.</text><text>&lt;p&gt;</text><text>For an explanation of containment within operation elements,</text><text>see {@link com.vmware.vapi.metadata.privilege.service.Operation}.</text></description></doc><attribute name='privileges'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>List of all privileges assigned to the operation element.</text></description></doc></attribute><attribute name='privilegeInfo'><type generic='List'><type reference='PrivilegeInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.PrivilegeInfo'/></type><doc><description index='0'><text>Privilege information of all the parameter elements of the operation element.</text><text>For an explanation of containment of privilege information within parameter</text><text>elements, see {@link com.vmware.vapi.metadata.privilege.PrivilegeInfo}.</text></description></doc></attribute></structure><structure name='PackageInfo' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name PackageInfo} {@term structure} contains the privilege information</text><text>of a package element.</text><text>&lt;p&gt;</text><text>For an explanation of privilege information contained within package</text><text>elements, see {@link com.vmware.vapi.metadata.privilege.Package}.</text></description></doc><attribute name='privileges'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>List of default privileges to be used for all the operations present</text><text>in this package. If a particular operation element has no explicit privileges</text><text>defined in the privilege definition file, these privileges are used for</text><text>enforcing authorization.</text></description></doc></attribute><attribute name='services'><type generic='Map'><type primitive='ID'/><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.ServiceInfo'/></type><doc><description index='0'><text>Information about all service elements contained in this package element</text><text>that contain privilege information. The key in the {@term map} is the identifier</text><text>of the service element and the value in the {@term map} is the privilege</text><text>information for the service element.</text><text>For an explanation of privilege information containment within service</text><text>elements, see {@link com.vmware.vapi.metadata.privilege.Service}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></attribute></structure><structure name='PrivilegeInfo' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name PrivilegeInfo} {@term structure} contains the privilege information</text><text>for a parameter element in an operation element.</text></description></doc><attribute name='propertyPath'><type primitive='String'/><doc><description index='0'><text>The {@name #propertyPath} points to an entity that is used in</text><text>the operation element. An entity can either be present in one of the parameter</text><text>elements or if a parameter is a structure element, it could also be present in</text><text>one of the field elements.</text><text>&lt;p&gt;</text><text>If the privilege is assigned to an entity used in the parameter, {@name #propertyPath}</text><text>will just contain the name of the parameter field. If the privilege is assigned</text><text>to an entity in one of the field elements of a parameter element that is a structure</text><text>element, then {@name #propertyPath} will contain a path to the field element starting</text><text>from the parameter name.</text></description></doc></attribute><attribute name='privileges'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>List of privileges assigned to the entity that is being referred by</text><text>{@link #propertyPath}.</text></description></doc></attribute></structure><structure name='ServiceInfo' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name ServiceInfo} {@term structure} contains privilege information</text><text>of a service element.</text><text>&lt;p&gt;</text><text>For an explanation of privilege information contained within service</text><text>elements, see {@link com.vmware.vapi.metadata.privilege.Service}.</text></description></doc><attribute name='operations'><type generic='Map'><type primitive='ID'/><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.OperationInfo'/></type><doc><description index='0'><text>Information about all operation elements contained in this service element</text><text>that contain privilege information. The key in the {@term map} is the identifier</text><text>of the operation element and the value in the {@term map} is the privilege</text><text>information for the operation element.</text><text>&lt;p&gt;</text><text>For an explanation of containment of privilege information within operation</text><text>elements, see {@link com.vmware.vapi.metadata.privilege.service.Operation}.</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata></attribute></structure><service name='Component' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name Component} {@term service} provides {@term operations}</text><text>to retrieve privilege information of a component element.</text><text>&lt;p&gt;</text><text>A component element is said to contain privilege information if</text><text>any one of package elements in it contains privilege information.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.component</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for vAPI component.</text></description></doc><value>com.vmware.vapi.component</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the component elements that have</text><text>privilege information.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the component elements that</text><text>have privilege information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves privilege information about the component element</text><text>corresponding to {@param.name componentId}.</text><text>&lt;p&gt;</text><text>The {@link ComponentData} contains the privilege information about</text><text>the component element and its fingerprint. It contains information about all</text><text>the package elements that belong to this component element.</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the component element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the component element associated with {@param.name componentId}</text><text>does not have any privilege information.</text></description></doc></error><result><type reference='ComponentData' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.ComponentData'/><doc><description index='0'><text>The {@link ComponentData} instance that corresponds to</text><text>{@param.name componentId}</text></description></doc></result></operation><operation name='fingerprint'><doc><description index='0'><text>Retrieves the fingerprint computed from the privilege metadata of</text><text>the component element corresponding to {@param.name componentId}.</text><text>&lt;p&gt;</text><text>The fingerprint provides clients an efficient way to check if the metadata</text><text>for a particular component has been modified on the server. The client can do</text><text>this by comparing the result of this operation with the fingerprint returned</text><text>in the result of {@link com.vmware.vapi.metadata.privilege.Component#get}.</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the component element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the component element associated with {@param.name componentId}</text><text>does not have any privilege information.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>The fingerprint computed from the privilege metadata of the component.</text></description></doc></result></operation></service><service name='Package' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name Package} {@term service} provides {@term operations}</text><text>to retrieve privilege information of a package element.</text><text>&lt;p&gt;</text><text>A package element is said to contain privilege information if there</text><text>is a default privilege assigned to all service elements contained</text><text>in the package element or if one of the operation elements contained</text><text>in one of the service elements in this package element has privilege</text><text>information.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for package.</text></description></doc><value>com.vmware.vapi.package</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the package elements that have</text><text>privilege information.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the package elements that</text><text>have privilege information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves privilege information about the package element</text><text>corresponding to {@param.name packageId}.</text></description></doc><parameter name='packageId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the package element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the package element associated with {@param.name packageId}</text><text>does not have any privilege information.</text></description></doc></error><result><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.PackageInfo'/><doc><description index='0'><text>The {@link PackageInfo} instance that corresponds to</text><text>{@param.name packageId}</text></description></doc></result></operation></service><service name='Service' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name Service} {@term service} provides {@term operations}</text><text>to retrieve privilege information of a service element.</text><text>&lt;p&gt;</text><text>A service element is said to contain privilege information if one of the</text><text>operation elements contained in this service element has privilege</text><text>information.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for service.</text></description></doc><value>com.vmware.vapi.service</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the service elements that have</text><text>privilege information.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for the service elements that</text><text>have privilege information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves privilege information about the service element</text><text>corresponding to {@param.name serviceId}.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId}</text><text>does not have any privilege information.</text></description></doc></error><result><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.ServiceInfo'/><doc><description index='0'><text>The {@link ServiceInfo} instance that corresponds to</text><text>{@param.name serviceId}</text></description></doc></result></operation></service><service name='Source' namespace='com.vmware.vapi.metadata.privilege'><doc><description index='0'><text>The {@name Source} {@term service} provides {@term operations} to</text><text>manage the sources of privilege metadata information.</text><text>&lt;p&gt;</text><text>The interface definition language infrastructure provides tools to</text><text>generate various kinds of metadata in JSON format from the interface</text><text>definition files and additional properties files. One of the generated</text><text>files contains privilege information. The generated file can be</text><text>registered as a source of metadata.</text><text>&lt;p&gt;</text><text>The privilege file contains all the data present in the interface</text><text>definition files. Each privilege file contains data about one</text><text>component element. When a privilege file is added as a source,</text><text>each source contributes only one component element's metadata.</text><text>&lt;p&gt;</text><text>Privilege metadata can also be discovered from a remote server that</text><text>supports the privilege metadata {@term services} (see</text><text>{@link com.vmware.vapi.metadata.privilege}). Since multiple components</text><text>can be registered with a single metadata server, when a remote server</text><text>is registered as a source, that source can contribute more than one</text><text>component.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.metadata.privilege.source</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for metadata source.</text></description></doc><value>com.vmware.vapi.metadata.privilege.source</value></constant><structure name='Info' namespace='com.vmware.vapi.metadata.privilege.Source'><doc><description index='0'><text>The {@name Info} {@term structure} contains the metadata source</text><text>information.</text></description></doc><attribute name='description'><type primitive='String'/><doc><description index='0'><text>English language human readable description of the source.</text></description></doc></attribute><attribute name='type'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Type of the metadata source.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='filepath'><type primitive='String'/><doc><description index='0'><text>Absolute file path of the privilege metadata file that has</text><text>the privilege information about one component element. The {@name filePath}</text><text>is the path to the file in the server's filesystem.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>FILE</entry></property></metadata></attribute><attribute name='address'><type primitive='URI'/><doc><description index='0'><text>Connection information for the remote server. This must be</text><text>in the format http(s)://IP:port/namespace.</text><text>&lt;p&gt;</text><text>The remote server must support the {@term services} in the</text><text>{@link com.vmware.vapi.metadata.privilege} {@term package}.</text><text>It must expose privilege information of one or more</text><text>components.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute></structure><structure name='CreateSpec' namespace='com.vmware.vapi.metadata.privilege.Source'><doc><description index='0'><text>The {@name CreateSpec} {@term structure} contains the registration</text><text>information of a privilege source.</text></description></doc><metadata><property name='Include' type='com.vmware.vapi.idl.model.IdlReferenceType'><type reference='SourceCreateSpec' namespace='com.vmware.vapi.metadata' target='STRUCTURE' declaration='com.vmware.vapi.metadata.SourceCreateSpec'/></property></metadata></structure><operation name='create'><doc><description index='0'><text>Creates a new metadata source. Once the server validates the registration</text><text>information of the metadata source, the privilege metadata is retrieved</text><text>from the source. This populates elements in all the {@term services}</text><text>defined in {@link com.vmware.vapi.metadata.privilege} {@term package}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>metadata source identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.privilege.source}.</text></content></doc></parameter><parameter name='spec'><type reference='CreateSpec' namespace='com.vmware.vapi.metadata.privilege.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.Source.CreateSpec'/><doc><description index='0'><text>create specification.</text></description></doc></parameter><error name='AlreadyExists'><type reference='AlreadyExists' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.AlreadyExists'/><doc><description index='0'><text>if the metadata source identifier is already</text><text>registered with the infrastructure.</text></description></doc></error><error name='InvalidArgument'><type reference='InvalidArgument' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.InvalidArgument'/><doc><description index='0'><text>if the type of the source specified in {@link CreateSpec#type}</text><text>is invalid.</text></description><description index='1'><text>if the file specified in {@link CreateSpec#filepath}</text><text>is not a valid JSON file or if the format of the privilege</text><text>metadata in the JSON file is invalid.</text></description><description index='2'><text>if the URI specified in {@link CreateSpec#address} is unreachable</text><text>or if there is a transport protocol or message protocol mismatch</text><text>between the client and the server or if the remote server do not</text><text>have {@term services} present in {@link com.vmware.vapi.metadata.privilege}</text><text>{@term package}.</text></description></doc></error><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the file specified in {@link CreateSpec#filepath}</text><text>does not exist.</text></description></doc></error><result></result></operation><operation name='delete'><doc><description index='0'><text>Deletes an existing privilege metadata source from the infrastructure.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.privilege.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result></result></operation><operation name='get'><doc><description index='0'><text>Retrieves information about the metadata source corresponding to</text><text>{@param.name sourceId}.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.privilege.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.metadata.privilege.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.Source.Info'/><doc><description index='0'><text>The {@link Info} instance that corresponds to</text><text>{@param.name sourceId}</text></description></doc></result></operation><operation name='list'><doc><description index='0'><text>Returns the identifiers of the metadata sources currently registered</text><text>with the infrastructure.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>The list of identifiers for metadata sources currently</text><text>registered.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.metadata.privilege.source}.</text></content></doc></result></operation><operation name='reload'><doc><description index='0'><text>Reloads the privilege metadata from all the metadata sources or of a</text><text>particular metadata source if {@param.name sourceId} is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, all the metadata sources</text><text>are reloaded.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.privilege.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result></result></operation><operation name='fingerprint'><doc><description index='0'><text>Returns the aggregate fingerprint of metadata from all the metadata</text><text>sources or from a particular metadata source if {@param.name sourceId}</text><text>is specified.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text>Identifier of the metadata source.</text></description><content type='optionalReason'><text>If unspecified, the fingerprint of all the</text><text>metadata sources is returned.</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.privilege.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the metadata source associated with {@param.name sourceId}</text><text>is not found.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>Aggregate fingerprint of all the metadata sources or of a</text><text>particular metadata source.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.privilege.service'><doc><description index='0'><text>The {@name com.vmware.vapi.metadata.privilege.service} {@term package} provides</text><text>{@term services} to retrieve privilege information for operation elements.</text></description></doc><service name='Operation' namespace='com.vmware.vapi.metadata.privilege.service'><doc><description index='0'><text>The {@name Operation} {@term service} provides {@term operations}</text><text>to retrieve privilege information of an operation element.</text><text>&lt;p&gt;</text><text>An operation element is said to contain privilege information if</text><text>there are any privileges assigned to the operation element or if</text><text>one of the parameter elements contained in it has privileges</text><text>assigned in privilege definition file.</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for operation.</text></description></doc><value>com.vmware.vapi.operation</value></constant><operation name='list'><doc><description index='0'><text>Returns the identifiers for the operation elements contained in the service</text><text>element corresponding to {@param.name serviceId} that have privilege</text><text>information.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId}</text><text>does not have any operation elements that have privilege</text><text>information.</text></description></doc></error><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>List of identifiers for the operation elements contained in the</text><text>service element that have privilege information.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Retrieves the privilege information about an operation element</text><text>corresponding to {@param.name operationId} contained in the service element</text><text>corresponding to {@param.name serviceId}.</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><parameter name='operationId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the operation element.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>if the service element associated with {@param.name serviceId} does not</text><text>exist.</text></description><description index='1'><text>if the operation element associated with {@param.name operationId} does not</text><text>exist.</text></description><description index='2'><text>if the operation element associated with {@param.name operationId} does not have</text><text>any privilege information.</text></description></doc></error><result><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.privilege' target='STRUCTURE' declaration='com.vmware.vapi.metadata.privilege.OperationInfo'/><doc><description index='0'><text>The {@link com.vmware.vapi.metadata.privilege.OperationInfo} instance</text><text>that corresponds to {@param.name operationId}.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.routing'><structure name='ComponentData' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Routing information of the vAPI component along with its checksum</text></description></doc><attribute name='info'><type reference='ComponentInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.ComponentInfo'/><doc><description index='0'><text>Routing information of the vAPI component</text></description></doc></attribute><attribute name='fingerprint'><type primitive='String'/><doc><description index='0'><text>Fingerprint of metadata of a vAPI component</text></description></doc></attribute></structure><structure name='ComponentInfo' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Information about a vAPI component that contains routing information</text><text>For an explanation of routing information within components, see</text><text>{@link com.vmware.vapi.metadata.routing.Component}</text></description></doc><attribute name='packages'><type generic='Map'><type primitive='ID'/><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.PackageInfo'/></type><doc><description index='0'><text>Routing information of all the vAPI packages. The key in the map is the</text><text>ID of the package and the value in the map is the routing information for</text><text>the package</text><text>For an explanation of routing information within packages, see</text><text>{@link com.vmware.vapi.metadata.routing.Package}</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata></attribute></structure><structure name='OperationInfo' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Information about a vAPI operation that contains routing information.</text><text>For an explanation of containment within operations, see</text><text>{@link com.vmware.vapi.metadata.routing.Operation}</text></description></doc><attribute name='routingInfo'><type reference='RoutingInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.RoutingInfo'/><doc><description index='0'><text>The routing information assigned for this operation.</text><text>For an explanation of routing information, see</text><text>{@link com.vmware.vapi.metadata.routing.RoutingInfo}</text></description></doc></attribute></structure><structure name='PackageInfo' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Information about a vAPI package containing routing information.</text><text>&lt;p&gt;</text><text>For an explanation of routing information within packages, see</text><text>{@link com.vmware.vapi.metadata.routing.Package}</text></description></doc><attribute name='routingInfo'><type reference='RoutingInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.RoutingInfo'/><doc><description index='0'><text>The routing information to be used for all the operations present in this</text><text>package. If a particular operation has no explicit routing information</text><text>defined in the routing definition file, this routing info will be used</text><text>for enforcing routing.</text></description></doc></attribute><attribute name='services'><type generic='Map'><type primitive='ID'/><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.ServiceInfo'/></type><doc><description index='0'><text>Information about all services in this package that contain routing</text><text>information. The key in the map is the ID of the service and the value in</text><text>the map is the routing information for the service</text><text>For an explanation of routing information within service, see</text><text>{@link com.vmware.vapi.metadata.routing.Service}</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></attribute></structure><structure name='RoutingInfo' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Routing information</text></description></doc><attribute name='routingPath'><type primitive='String'/><doc><description index='0'><text>The initial version of the routing info allowed routing by single</text><text>parameter. Clients requested allowing them to place more than one</text><text>parameters so that the routing is performed by the first non-null</text><text>argument in the list. To achieve that we have added method</text><text>com.vmware.vapi.metadata.RoutingInfo#getRoutingPaths() which should be</text><text>preferred over com.vmware.vapi.metadata.RoutingInfo#getRoutingPath()</text><text>which is deprecated. The deprecated method will return string</text><text>representation of the comma-separated list of ids, while the</text><text>com.vmware.vapi.metadata.RoutingInfo#getRoutingPaths() will return</text><text>instance of java.util.List&lt;String&gt; containing the ids.</text></description></doc></attribute><attribute name='routingStrategy'><type primitive='String'/><doc><description index='0'><text>The routingStrategy is the actual strategy, based on which will be</text><text>performed the routing. If the routingStrategy is IDROUTE, in</text><text>{@link RoutingInfo#routingPath} must be assigned the id for the routing.</text><text>There are also default strategies like IDFIRSTROUTE, LOCAL for which</text><text>there is no need to specify routingPath. The name of these strategies is</text><text>clear about where we should look for an ID to route, or if we need ID at</text><text>all.</text></description></doc></attribute><attribute name='operationHints'><type generic='List'><type primitive='String'/></type><doc><description index='0'><text>This is comma-separated list of hints from the input ini file. Here the user</text><text>must mention the type of the invoked method, e.g. HINTS(create) or HINTS(delete).</text><text>In the future we expect this field to contain other hints also</text><text>e.g. HINTS(create,lazy).</text></description></doc></attribute><attribute name='idTypes'><type generic='Map'><type primitive='String'/><type primitive='String'/></type><doc><description index='0'><text>This is map of specifically predefined resource types</text><text>in the routing metadata.</text><text>For example id types that do not require storage in the Inventory Service.</text><text>Those type of objects are called 'positioned' - it is well</text><text>known in advance where those objects will be routed, because their ids contain</text><text>VC server guid.</text><text>Example: Content Library Sessions are considered transient objects that do not</text><text>need to be persisted in the IS.</text><text>Routing ini file must contain section:</text><text>[types]</text><text>com.vmware.content.DownloadSession=positioned</text><text>The map therefore will contain:</text><text>{{"com.vmware.content.DownloadSession", "positioned"}}</text><text>Note: This should not be final solution. To avoid duplication, currently this</text><text>map will be stored only in one RoutingInfo object across the whole</text><text>ProductModel. In the future, it might be moved to a common place as</text><text>ComponentInfo, for example.</text></description></doc></attribute></structure><structure name='ServiceInfo' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Information about a vAPI service that has routing information</text><text>A service is said to contain routing information if any of its operations</text><text>have routing information</text></description></doc><attribute name='routingInfo'><type reference='RoutingInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.RoutingInfo'/><doc><description index='0'><text>The routing information to be used for all the operations present in this</text><text>service. If a particular operation has no explicit routing information</text><text>defined in the routing definition file, this routing info will be used</text><text>for enforcing routing.</text></description></doc></attribute><attribute name='operations'><type generic='Map'><type primitive='ID'/><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.OperationInfo'/></type><doc><description index='0'><text>Information about all operations in this service that contain routing</text><text>Information. The key in the map is the ID of the operation and the value</text><text>in the map is the routing information for this operation.</text><text>&lt;p&gt;</text><text>For an explanation of routing information within operations, see</text><text>{@link com.vmware.vapi.metadata.routing.Operation}</text></description><content type='metadata'><text>When clients pass a value of this {@term structure} as a {@term parameter}, </text><text>the key in the {@term field} {@term map} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text><text>When {@term operations} return a value of this {@term structure} as a {@term result}, </text><text>the key in the {@term field} {@term map} will be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata></attribute></structure><service name='Component' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Operations to retrieve information about the routing information in a vAPI</text><text>component.</text><text>A Component is said to contain routing information if any of its packages,</text><text>services or methods contain routing information</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.component</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for vAPI Component.</text></description></doc><value>com.vmware.vapi.component</value></constant><operation name='list'><doc><description index='0'><text>List all the vAPI components that contain operations which have routing</text><text>information.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>list of fully qualified component names</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Get the routing information for a vAPI component</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text></text><text>fully qualified component name</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text></text><text>If the component name does not exist</text></description></doc></error><result><type reference='ComponentData' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.ComponentData'/><doc><description index='0'><text>routing information for the vAPI component</text></description></doc></result></operation><operation name='fingerprint'><doc><description index='0'><text>Checksum of all routing metadata for a vAPI component on the server</text></description></doc><parameter name='componentId'><type primitive='ID'/><doc><description index='0'><text></text><text>fully qualified component name</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.component}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text></text><text>If the component name does not exist</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>checksum of routing metadata for a vAPI component</text></description></doc></result></operation></service><service name='Package' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Operations to retrieve information about routing information in a vAPI</text><text>package</text><text>A Package is said to contain routing information if there is a default</text><text>RoutingInfo assigned to all operations within a package or if one of the</text><text>operations within this package has explicit routing information</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.package</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for vAPI package.</text></description></doc><value>com.vmware.vapi.package</value></constant><operation name='list'><doc><description index='0'><text>List of all vAPI packages that have routing information</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>list of fully qualified package names</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Get the routing information for a vAPI package</text></description></doc><parameter name='packageId'><type primitive='ID'/><doc><description index='0'><text>fully qualified package name</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.package}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the package name does not exist</text></description></doc></error><result><type reference='PackageInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.PackageInfo'/><doc><description index='0'><text>routing information for the vAPI package</text></description></doc></result></operation></service><service name='Service' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Operations to retrieve information about routing information of a vAPI</text><text>service</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for vAPI Service.</text></description></doc><value>com.vmware.vapi.service</value></constant><operation name='list'><doc><description index='0'><text>Get list of all vAPI services that have operations with routing</text><text>information</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>list of fully qualified service names</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Get the routing information for a vAPI service</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>fully qualified service name</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the service name does not exist</text></description></doc></error><result><type reference='ServiceInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.ServiceInfo'/><doc><description index='0'><text>identifier information for the vAPI service</text></description></doc></result></operation></service><service name='Source' namespace='com.vmware.vapi.metadata.routing'><doc><description index='0'><text>Operations to manage the metadata sources for routing information</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.metadata.source</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for vAPI metadata source.</text></description></doc><value>com.vmware.vapi.metadata.source</value></constant><structure name='Info' namespace='com.vmware.vapi.metadata.routing.Source'><doc><description index='0'><text>Metadata source info.</text></description></doc><attribute name='description'><type primitive='String'/><doc><description index='0'><text>Description of the source.</text></description></doc></attribute><attribute name='type'><type reference='SourceType' namespace='com.vmware.vapi.metadata' target='ENUMERATION' declaration='com.vmware.vapi.metadata.SourceType'/><doc><description index='0'><text>Type of the metadata source.</text></description></doc><metadata><property name='UnionTag' type='java.lang.Boolean'>true</property></metadata></attribute><attribute name='filepath'><type primitive='String'/><doc><description index='0'><text>Absolute file path of the file that has the metadata information.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>FILE</entry></property></metadata></attribute><attribute name='address'><type primitive='URI'/><doc><description index='0'><text>URI of the remote vAPI endpoint. This should be of the format</text><text>http(s):IP:port/namespace.</text></description></doc><metadata><property name='UnionCase' type='java.util.Map'><entry key='tag' type='java.lang.String'>type</entry><entry key='value' type='java.lang.String'>REMOTE</entry></property></metadata></attribute></structure><structure name='CreateSpec' namespace='com.vmware.vapi.metadata.routing.Source'><doc><description index='0'><text>Metadata source create spec.</text></description></doc><metadata><property name='Include' type='com.vmware.vapi.idl.model.IdlReferenceType'><type reference='SourceCreateSpec' namespace='com.vmware.vapi.metadata' target='STRUCTURE' declaration='com.vmware.vapi.metadata.SourceCreateSpec'/></property></metadata></structure><operation name='create'><doc><description index='0'><text>Create a new metadata source.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text></text><text>metadata source identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><parameter name='spec'><type reference='CreateSpec' namespace='com.vmware.vapi.metadata.routing.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.Source.CreateSpec'/><doc><description index='0'><text></text><text>create specification.</text></description></doc></parameter><error name='AlreadyExists'><type reference='AlreadyExists' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.AlreadyExists'/><doc><description index='0'><text></text><text>If the metadata source identifier is already present.</text></description></doc></error><error name='InvalidArgument'><type reference='InvalidArgument' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.InvalidArgument'/><doc><description index='0'><text></text><text>If type of the source specified in @{link CreateSpec#type} is</text><text>invalid.</text></description><description index='1'><text></text><text>If the file specified in @{link CreateSpec#filepath} is not a</text><text>valid json file.</text></description><description index='2'><text></text><text>If the URI specified in @{link CreateSpec#address} is</text><text>unreachable or not a vAPI compatible server.</text></description></doc></error><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text></text><text>If the file specified in @{link CreateSpec#filepath} does not</text><text>exist.</text></description></doc></error><result></result></operation><operation name='delete'><doc><description index='0'><text>Delete a metadata source.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text></text><text>Metadata source identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text></text><text>If the metadata source identifier is not found.</text></description></doc></error><result></result></operation><operation name='get'><doc><description index='0'><text>Get the details about a metadata source.</text></description></doc><parameter name='sourceId'><type primitive='ID'/><doc><description index='0'><text></text><text>Metadata source identifier.</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text></text><text>If the metadata source identifier is not found.</text></description></doc></error><result><type reference='Info' namespace='com.vmware.vapi.metadata.routing.Source' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.Source.Info'/><doc><description index='0'><text>Metadata source info.</text></description></doc></result></operation><operation name='list'><doc><description index='0'><text>List all the metadata sources.</text></description></doc><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>List of all metadata sources.</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></result></operation><operation name='reload'><doc><description index='0'><text>Reload metadata from all the sources or of a particular source.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text></text><text>Metadata source identifier.</text></description><content type='optionalReason'><text></text><text>If unspecified, all the sources are reloaded</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text></text><text>If the metadata source identifier is not found.</text></description></doc></error><result></result></operation><operation name='fingerprint'><doc><description index='0'><text>Returns the fingerprint of all the sources or of a particular source.</text></description></doc><parameter name='sourceId'><type generic='Optional'><type primitive='ID'/></type><doc><description index='0'><text></text><text>Metadata source identifier.</text></description><content type='optionalReason'><text></text><text>If unspecified, fingerprint of all the sources is returned</text></content><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.metadata.source}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text></text><text>If the metadata source identifier is not found.</text></description></doc></error><result><type primitive='String'/><doc><description index='0'><text>fingerprint of all the sources or of a particular source.</text></description></doc></result></operation></service></package><package name='com.vmware.vapi.metadata.routing.service'><service name='Operation' namespace='com.vmware.vapi.metadata.routing.service'><doc><description index='0'><text>Operations to retrieve information about routing in a vAPI operation</text></description></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.operation</property></metadata><constant name='RESOURCE_TYPE'><type primitive='String'/><doc><description index='0'><text>Resource type for vAPI operation.</text></description></doc><value>com.vmware.vapi.operation</value></constant><operation name='list'><doc><description index='0'><text>Get the IDs of all the vAPI operations in the given service that contain</text><text>routing information</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the service identifier does not exist.</text></description></doc></error><result><type generic='List'><type primitive='ID'/></type><doc><description index='0'><text>list of operation identifiers</text></description><content type='metadata'><text>The {@term result} will contain identifiers for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></result></operation><operation name='get'><doc><description index='0'><text>Get information about a vAPI operation that contains routing information</text></description></doc><parameter name='serviceId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the service</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.service}.</text></content></doc><metadata><property name='Resource' type='java.lang.String'>com.vmware.vapi.service</property></metadata></parameter><parameter name='operationId'><type primitive='ID'/><doc><description index='0'><text>Identifier of the operation</text></description><content type='metadata'><text>The {@term parameter} must be an identifier for the resource type: {@code com.vmware.vapi.operation}.</text></content></doc></parameter><error name='NotFound'><type reference='NotFound' namespace='com.vmware.vapi.std.errors' target='STRUCTURE' declaration='com.vmware.vapi.std.errors.NotFound'/><doc><description index='0'><text>If the service identifier does not exist or if the specified</text><text>operation identifier does not exist in the service.</text></description></doc></error><result><type reference='OperationInfo' namespace='com.vmware.vapi.metadata.routing' target='STRUCTURE' declaration='com.vmware.vapi.metadata.routing.OperationInfo'/><doc><description index='0'><text>Operation info for the vAPI operation that contains routing</text><text>information.</text></description></doc></result></operation></service></package></model>
